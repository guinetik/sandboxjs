class e{constructor(e,t={}){this.container=e,this.options=t,this.changeHandlers=[],this.executeHandlers=[]}getValue(){throw new Error("getValue() must be implemented by editor adapter")}setValue(e){throw new Error("setValue() must be implemented by editor adapter")}onChange(e){this.changeHandlers.push(e)}onExecute(e){this.executeHandlers.push(e)}focus(){throw new Error("focus() must be implemented by editor adapter")}triggerChange(){this.changeHandlers.forEach(e=>e(this.getValue()))}triggerExecute(){this.executeHandlers.forEach(e=>e())}destroy(){}}class t extends e{constructor(e,t={}){super(e,t),this.cm=null,this.init()}init(){if("undefined"==typeof CodeMirror)throw new Error("CodeMirror is not loaded. Include CodeMirror before using this adapter.");const e=document.createElement("textarea");this.container.appendChild(e),this.cm=CodeMirror.fromTextArea(e,{mode:this.options.mode||"javascript",theme:this.options.theme||"darcula",lineNumbers:!0,lineWrapping:!0,indentUnit:2,tabSize:2,indentWithTabs:!1,autofocus:!1!==this.options.autofocus,extraKeys:{"Ctrl-Enter":()=>this.triggerExecute(),"Cmd-Enter":()=>this.triggerExecute()}}),this.cm.on("change",()=>{this.triggerChange()})}getValue(){return this.cm.getValue()}setValue(e){this.cm.setValue(e)}focus(){this.cm.focus()}destroy(){this.cm&&this.cm.toTextArea()}}export{t as C,e as E};
//# sourceMappingURL=vendor-DmI2F1iK.js.map
