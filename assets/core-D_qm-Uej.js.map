{"version":3,"file":"core-D_qm-Uej.js","sources":["../../src/core/logger.js","../../src/core/template.js","../../src/core/sandbox.js","../../src/core/console.js","../../src/core/events.js"],"sourcesContent":["/**\n * Configurable logging interface with level-based filtering and prefixes\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance\n   * @param {Object} options - Logger configuration options\n   * @param {boolean} [options.enabled=true] - Whether logging is enabled\n   * @param {string} [options.level='info'] - Log level (error, warn, info, debug, trace)\n   * @param {string} [options.prefix=''] - Prefix to add to all log messages\n   */\n  constructor(options = {}) {\n    this.enabled = options.enabled !== false; // Default: enabled\n    this.level = options.level || 'info'; // Default: info\n    this.prefix = options.prefix || '';\n\n    // Log levels (higher number = more verbose)\n    this.levels = {\n      error: 0,\n      warn: 1,\n      info: 2,\n      debug: 3,\n      trace: 4\n    };\n\n    this.currentLevel = this.levels[this.level] || this.levels.info;\n  }\n\n  /**\n   * Checks if a message should be logged based on current level and enabled state\n   * @param {string} level - The log level to check\n   * @returns {boolean} True if the message should be logged\n   */\n  shouldLog(level) {\n    return this.enabled && this.levels[level] <= this.currentLevel;\n  }\n\n  /**\n   * Formats a message with prefix\n   * @param {string} message - The message to format\n   * @param {...any} args - Additional arguments\n   * @returns {Array} Formatted message array\n   */\n  formatMessage(message, ...args) {\n    const prefix = this.prefix ? `[${this.prefix}] ` : '';\n    return [prefix + message, ...args];\n  }\n\n  /**\n   * Logs an error message\n   * @param {string} message - The error message\n   * @param {...any} args - Additional arguments\n   */\n  error(message, ...args) {\n    if (this.shouldLog('error')) {\n      console.error(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a warning message\n   * @param {string} message - The warning message\n   * @param {...any} args - Additional arguments\n   */\n  warn(message, ...args) {\n    if (this.shouldLog('warn')) {\n      console.warn(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs an info message\n   * @param {string} message - The info message\n   * @param {...any} args - Additional arguments\n   */\n  info(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.info(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a general message\n   * @param {string} message - The message\n   * @param {...any} args - Additional arguments\n   */\n  log(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.log(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a debug message\n   * @param {string} message - The debug message\n   * @param {...any} args - Additional arguments\n   */\n  debug(message, ...args) {\n    if (this.shouldLog('debug')) {\n      console.debug(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a trace message\n   * @param {string} message - The trace message\n   * @param {...any} args - Additional arguments\n   */\n  trace(message, ...args) {\n    if (this.shouldLog('trace')) {\n      console.trace(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a table of data\n   * @param {any} data - The data to display in table format\n   * @param {Array} [columns] - Optional column names\n   */\n  table(data, columns) {\n    if (this.shouldLog('info')) {\n      const prefix = this.prefix ? `[${this.prefix}]` : '';\n      if (prefix) console.log(prefix);\n      console.table(data, columns);\n    }\n  }\n\n  /**\n   * Creates a new group in the console\n   * @param {string} label - The group label\n   */\n  group(label) {\n    if (this.shouldLog('info')) {\n      console.group(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Creates a new collapsed group in the console\n   * @param {string} label - The group label\n   */\n  groupCollapsed(label) {\n    if (this.shouldLog('info')) {\n      console.groupCollapsed(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Ends the current console group\n   */\n  groupEnd() {\n    if (this.shouldLog('info')) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Starts a timer with the given label\n   * @param {string} label - The timer label\n   */\n  time(label) {\n    if (this.shouldLog('debug')) {\n      console.time(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Ends a timer with the given label\n   * @param {string} label - The timer label\n   */\n  timeEnd(label) {\n    if (this.shouldLog('debug')) {\n      console.timeEnd(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Sets the log level\n   * @param {string} level - The new log level\n   */\n  setLevel(level) {\n    this.level = level;\n    this.currentLevel = this.levels[level] || this.levels.info;\n  }\n\n  /**\n   * Enables logging\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * Disables logging\n   */\n  disable() {\n    this.enabled = false;\n  }\n\n  /**\n   * Checks if logging is enabled\n   * @returns {boolean} True if logging is enabled\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n}","import { Logger } from './logger.js';\n\n/**\n * Template engine for building sandboxed HTML execution environments\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class TemplateEngine {\n  /**\n   * Creates a new TemplateEngine instance\n   * @param {string} [templatePath='./src/core/sandbox-template.html'] - Path to the HTML template file\n   * @param {Object} [options={}] - Configuration options\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(templatePath = './src/core/sandbox-template.html', options = {}) {\n    this.templatePath = templatePath;\n    this.template = null;\n    this.isLoaded = false;\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'TemplateEngine'\n    });\n  }\n\n  /**\n   * Forces a reload of the template from disk\n   */\n  forceReload() {\n    this.logger.info('Force reloading template...');\n    this.template = null;\n    this.isLoaded = false;\n  }\n\n  /**\n   * Initializes the template engine by loading the HTML template\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Starting initialization...');\n    if (this.isLoaded) {\n      this.logger.debug('Already loaded, skipping');\n      return;\n    }\n\n    try {\n      this.logger.debug('Fetching template from:', this.templatePath);\n      // Add cache busting to force reload\n      const cacheBuster = '?t=' + Date.now();\n      const response = await fetch(this.templatePath + cacheBuster);\n      if (!response.ok) throw new Error(`Failed to load template: ${response.status}`);\n      this.template = await response.text();\n      this.logger.info('Template loaded successfully, length:', this.template.length);\n      this.logger.debug('Template preview:', this.template.substring(0, 200) + '...');\n      this.logger.debug('SECRET marker check:', this.template.includes('{{SECRET}}') ? 'Found {{SECRET}}' : 'SECRET marker missing!');\n      this.isLoaded = true;\n    } catch (error) {\n      this.logger.error('Failed to load sandbox template:', error);\n      this.logger.warn('Using fallback template');\n      this.template = this.getFallbackTemplate();\n      this.isLoaded = true;\n    }\n  }\n\n  /**\n   * Returns a fallback HTML template when the external template file fails to load\n   * @returns {string} The fallback HTML template\n   */\n  getFallbackTemplate() {\n    return `<!doctype html>\n<html><head><meta charset=\"utf-8\"><title>Sandbox</title>\n<style>html,body{margin:0;padding:12px;font:14px/1.4 -apple-system, system-ui, Segoe UI, Roboto} body{background:#fff;color:#111}</style>\n</head><body>\n<script>\n(function(){\n  var SECRET = \"{{ SECRET }}\";\n  var send = function(type){\n    var args = Array.prototype.slice.call(arguments,1);\n    try { parent.postMessage({ __sandbox: true, secret: SECRET, type: type, args: args }, \"*\"); } catch(e) {}\n  };\n  [\"log\",\"info\",\"warn\",\"error\"].forEach ? [\"log\",\"info\",\"warn\",\"error\"].forEach(function(m){\n    var original = console[m].bind(console);\n    console[m] = function(){ send.apply(null, [m].concat([].slice.call(arguments))); try { original.apply(console, arguments); } catch(_) {} };\n  }) : null;\n  addEventListener(\"error\", function(e){\n    send(\"error\", (e.error && (e.error.stack || e.error.message)) || (e.message + \" @\" + e.filename + \":\" + e.lineno + \":\" + e.colno));\n  });\n  addEventListener(\"unhandledrejection\", function(e){\n    var r = e.reason; send(\"error\", \"Unhandled rejection: \" + (r && (r.stack || r.message) || String(r)));\n  });\n  try {\n{{ USER_CODE }}\n  } catch (err) {\n    try { console.error(err); } catch(_) {}\n  } finally {\n    setTimeout(function(){ send(\"done\"); }, 0);\n  }\n})();\n</script>\n</body></html>`;\n  }\n\n  /**\n   * Builds an HTML document with user code and security token injected\n   * @param {string} userCode - The user's JavaScript code to execute\n   * @param {string} secret - Security token for sandboxed communication\n   * @returns {string} Complete HTML document ready for iframe execution\n   */\n  buildSrcDoc(userCode, secret) {\n    this.logger.debug('Building srcDoc...');\n    if (!this.isLoaded) {\n      throw new Error('TemplateEngine not initialized. Call initialize() first.');\n    }\n\n    const escaped = userCode.replace(/<\\/(script)/gi, '<\\\\/$1');\n    const secretValue = String(secret); // Just the raw string, no quotes\n\n    // Add sourceURL to user code for better debugging\n    const userCodeWithSourceMap = `//# sourceURL=user-code.js\\n${escaped}`;\n\n    this.logger.trace('Replacing markers - SECRET:', secretValue);\n    this.logger.trace('Replacing markers - USER_CODE preview:', escaped.substring(0, 100) + '...');\n    this.logger.trace('USER_CODE marker check:', this.template.includes('USER_CODE') ? 'Found USER_CODE' : 'USER_CODE marker missing!');\n\n    const afterSecret = this.template.replace(/\\{\\{\\s*SECRET\\s*\\}\\}/g, secretValue);\n    this.logger.trace('After SECRET replacement, length:', afterSecret.length);\n\n    const result = afterSecret.replace(/\\{\\{\\s*USER_CODE\\s*\\}\\}/g, userCodeWithSourceMap);\n    this.logger.trace('After USER_CODE replacement, length:', result.length);\n\n    this.logger.debug('Template replacement complete');\n    this.logger.trace('Result preview:', result.substring(0, 500) + '...');\n\n    return result;\n  }\n}","import { TemplateEngine } from './template.js';\nimport { Logger } from './logger.js';\n\n/**\n * Sandboxed JavaScript execution engine using iframe isolation\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class SandboxEngine {\n  /**\n   * Creates a new SandboxEngine instance\n   * @param {HTMLElement} container - DOM element to contain the sandbox iframe\n   * @param {Object} [options={}] - Configuration options\n   * @param {number} [options.timeLimit=4000] - Execution timeout in milliseconds\n   * @param {Function} [options.onMessage] - Callback for sandbox messages\n   * @param {Function} [options.onStatusChange] - Callback for status updates\n   * @param {string} [options.templatePath] - Path to custom sandbox template\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.timeLimit = options.timeLimit || 4000;\n    this.onMessage = options.onMessage || (() => {});\n    this.onStatusChange = options.onStatusChange || (() => {});\n\n    this.iframe = null;\n    this.killTimer = null;\n    this.currentSecret = this.generateSecret();\n\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'SandboxEngine'\n    });\n\n    this.templateEngine = new TemplateEngine(options.templatePath, {\n      debug: options.debug,\n      logLevel: options.logLevel\n    });\n\n    this.createIframe();\n    this.setupMessageListener();\n  }\n\n  /**\n   * Initializes the sandbox engine and template system\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Initializing...');\n    await this.templateEngine.initialize();\n    this.logger.info('Template engine initialized');\n  }\n\n  /**\n   * Generates a cryptographically secure random secret for sandbox communication\n   * @returns {string} Random secret token\n   */\n  generateSecret() {\n    try {\n      if (window.crypto && window.crypto.getRandomValues) {\n        const arr = new Uint32Array(2);\n        window.crypto.getRandomValues(arr);\n        return String(arr[0]) + String(arr[1]);\n      }\n    } catch (e) {}\n    return String(Math.random()).slice(2) + Date.now();\n  }\n\n  /**\n   * Creates a new sandboxed iframe element\n   */\n  createIframe() {\n    // Clear the entire container to ensure no duplicates\n    this.container.innerHTML = '';\n\n    this.iframe = document.createElement('iframe');\n    this.iframe.className = 'sandbox-iframe';\n    this.iframe.setAttribute('sandbox', 'allow-scripts allow-modals');\n    this.iframe.title = 'Code Sandbox';\n    this.container.appendChild(this.iframe);\n  }\n\n  /**\n   * Resets the sandbox by creating a fresh iframe\n   */\n  reset() {\n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n      this.killTimer = null;\n    }\n    this.createIframe();\n    this.onStatusChange('reset');\n  }\n\n  /**\n   * Validates JavaScript syntax without executing it\n   * @param {string} code - The JavaScript code to validate\n   * @returns {Object} Validation result with {valid: boolean, error?: string}\n   */\n  validateSyntax(code) {\n    try {\n      // Use Function constructor to check syntax without executing\n      new Function(code);\n      return { valid: true };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message,\n        name: error.name,\n        toString: () => `${error.name}: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Executes JavaScript code in the sandboxed iframe\n   * @param {string} code - The JavaScript code to execute\n   */\n  execute(code) {\n    this.logger.debug('Executing code...');\n\n    // First, validate syntax\n    const validation = this.validateSyntax(code);\n    if (!validation.valid) {\n      this.logger.debug('Syntax error detected:', validation.error);\n      this.onMessage('error', [validation.toString()]);\n      this.onStatusChange('completed');\n      return;\n    }\n\n    this.currentSecret = this.generateSecret();\n    this.logger.trace('Generated secret:', this.currentSecret);\n\n    const srcdoc = this.templateEngine.buildSrcDoc(code, this.currentSecret);\n    this.logger.debug('Setting iframe srcdoc...');\n\n    this.iframe.srcdoc = srcdoc;\n    this.onStatusChange('executing');\n\n    if (this.killTimer) clearTimeout(this.killTimer);\n    this.killTimer = setTimeout(() => {\n      this.onMessage('error', [`⏱️ Execution timeout (${this.timeLimit}ms). Sandbox reset.`]);\n      this.reset();\n      this.onStatusChange('timeout');\n    }, this.timeLimit);\n  }\n\n\n  /**\n   * Sets up the postMessage listener for communication with the sandboxed iframe\n   */\n  setupMessageListener() {\n    window.addEventListener('message', (ev) => {\n      if (ev.source !== this.iframe.contentWindow) return;\n      const data = ev.data || {};\n      if (!data.__sandbox || data.secret !== this.currentSecret) return;\n\n      const type = data.type || 'log';\n      const args = Array.isArray(data.args) ? data.args : [data.args];\n\n      if (type === 'done') {\n        if (this.killTimer) {\n          clearTimeout(this.killTimer);\n          this.killTimer = null;\n        }\n        this.onStatusChange('completed');\n        return;\n      }\n\n      this.onMessage(type, args);\n    });\n  }\n\n  /**\n   * Cleans up the sandbox engine by removing timers and DOM elements\n   */\n  destroy() {\n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n    }\n    if (this.iframe) {\n      this.iframe.remove();\n    }\n  }\n}","/**\n * Console output renderer for displaying sandboxed code execution results\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class ConsoleOutput {\n  /**\n   * Creates a new ConsoleOutput instance\n   * @param {HTMLElement} container - The DOM element to render console output in\n   */\n  constructor(container) {\n    this.container = container;\n  }\n\n  /**\n   * Clears all console output\n   */\n  clear() {\n    this.container.innerHTML = '';\n  }\n\n  /**\n   * Adds a new line to the console output\n   * @param {string} type - The log type (log, info, warn, error)\n   * @param {Array} args - The arguments to display\n   */\n  addLine(type, args) {\n    const div = document.createElement('div');\n    div.className = `console-line console-${type}`;\n    div.textContent = args.map(this.formatArg).join(' ');\n    this.container.appendChild(div);\n    this.container.scrollTop = this.container.scrollHeight;\n  }\n\n  /**\n   * Formats a value for display in the console\n   * @param {any} value - The value to format\n   * @returns {string} The formatted string representation\n   */\n  formatArg(value) {\n    try {\n      if (value instanceof Error) {\n        return value.stack || value.message || String(value);\n      }\n    } catch (e) {}\n\n    const type = typeof value;\n    if (type === 'string') return value;\n    if (type === 'number' || type === 'boolean' || value === null) return String(value);\n    if (type === 'undefined') return 'undefined';\n\n    if (typeof Node !== 'undefined' && value instanceof Node) {\n      return '<' + (value.nodeName || 'node').toLowerCase() + '>';\n    }\n\n    try {\n      const seen = new WeakSet();\n      return JSON.stringify(value, (key, val) => {\n        if (typeof val === 'object' && val !== null) {\n          if (seen.has(val)) return '[Circular]';\n          seen.add(val);\n        }\n        if (typeof Node !== 'undefined' && val instanceof Node) {\n          return '<' + (val.nodeName || 'node').toLowerCase() + '>';\n        }\n        if (val instanceof Error) {\n          return val.stack || val.message || String(val);\n        }\n        return val;\n      }, 2);\n    } catch (e) {\n      return String(value);\n    }\n  }\n}","/**\n * Event system for external communication with the sandbox\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EventEmitter {\n  /**\n   * Creates a new EventEmitter instance\n   */\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * Registers an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @param {Object} [options={}] - Options for the listener\n   * @param {boolean} [options.once=false] - Whether to remove after first call\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, callback, options = {}) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n\n    const listener = {\n      callback,\n      once: options.once || false\n    };\n\n    this.events.get(event).push(listener);\n\n    // Return unsubscribe function\n    return () => this.off(event, callback);\n  }\n\n  /**\n   * Registers a one-time event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, callback) {\n    return this.on(event, callback, { once: true });\n  }\n\n  /**\n   * Removes an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function to remove\n   */\n  off(event, callback) {\n    if (!this.events.has(event)) return;\n\n    const listeners = this.events.get(event);\n    const index = listeners.findIndex(listener => listener.callback === callback);\n\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n  }\n\n  /**\n   * Emits an event to all registered listeners\n   * @param {string} event - The event name\n   * @param {...any} args - Arguments to pass to listeners\n   * @returns {boolean} True if any listeners were called\n   */\n  emit(event, ...args) {\n    if (!this.events.has(event)) return false;\n\n    const listeners = this.events.get(event);\n    const listenersToRemove = [];\n\n    listeners.forEach((listener, index) => {\n      try {\n        listener.callback(...args);\n        if (listener.once) {\n          listenersToRemove.push(index);\n        }\n      } catch (error) {\n        console.error(`Error in event listener for '${event}':`, error);\n      }\n    });\n\n    // Remove one-time listeners (in reverse order to maintain indices)\n    listenersToRemove.reverse().forEach(index => {\n      listeners.splice(index, 1);\n    });\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes all listeners for an event, or all listeners if no event specified\n   * @param {string} [event] - The event name, or undefined to clear all\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n\n  /**\n   * Returns an array of event names that have listeners\n   * @returns {Array<string>} Array of event names\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n\n  /**\n   * Returns the number of listeners for an event\n   * @param {string} event - The event name\n   * @returns {number} Number of listeners\n   */\n  listenerCount(event) {\n    return this.events.has(event) ? this.events.get(event).length : 0;\n  }\n}"],"names":["Logger","constructor","options","this","enabled","level","prefix","levels","error","warn","info","debug","trace","currentLevel","shouldLog","formatMessage","message","args","console","log","table","data","columns","group","label","groupCollapsed","groupEnd","time","timeEnd","setLevel","enable","disable","isEnabled","TemplateEngine","templatePath","template","isLoaded","logger","logLevel","forceReload","initialize","cacheBuster","Date","now","response","fetch","ok","Error","status","text","length","substring","includes","getFallbackTemplate","buildSrcDoc","userCode","secret","escaped","replace","secretValue","String","userCodeWithSourceMap","afterSecret","result","SandboxEngine","container","timeLimit","onMessage","onStatusChange","iframe","killTimer","currentSecret","generateSecret","templateEngine","createIframe","setupMessageListener","window","crypto","getRandomValues","arr","Uint32Array","e","Math","random","slice","innerHTML","document","createElement","className","setAttribute","title","appendChild","reset","clearTimeout","validateSyntax","code","Function","valid","name","toString","execute","validation","srcdoc","setTimeout","addEventListener","ev","source","contentWindow","__sandbox","type","Array","isArray","destroy","remove","ConsoleOutput","clear","addLine","div","textContent","map","formatArg","join","scrollTop","scrollHeight","value","stack","Node","nodeName","toLowerCase","seen","WeakSet","JSON","stringify","key","val","has","add","EventEmitter","events","Map","on","event","callback","set","listener","once","get","push","off","listeners","index","findIndex","splice","delete","emit","listenersToRemove","forEach","reverse","removeAllListeners","eventNames","from","keys","listenerCount"],"mappings":"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"}