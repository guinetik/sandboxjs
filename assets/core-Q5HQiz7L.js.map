{"version":3,"file":"core-Q5HQiz7L.js","sources":["../../src/core/utils.js","../../src/ui/sandbox.js","../../src/core/sandbox.js","../../src/core/console.js","../../src/core/events.js"],"sourcesContent":["/**\n * Utility functions for the sandbox application\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\n\nimport { NETWORK_TIMEOUT_MS } from './constants.js';\n\n/**\n * Creates a fetch request with timeout\n * @param {string} url - The URL to fetch\n * @param {Object} options - Fetch options\n * @param {number} timeout - Timeout in milliseconds\n * @returns {Promise<Response>} The fetch response\n */\nexport async function fetchWithTimeout(url, options = {}, timeout = NETWORK_TIMEOUT_MS) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new Error(`Request timeout after ${timeout}ms`);\n    }\n    throw error;\n  }\n}\n\n/**\n * Escapes HTML to prevent XSS\n * @param {string} text - Text to escape\n * @returns {string} Escaped text\n */\nexport function escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Debounces a function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Throttles a function\n * @param {Function} func - Function to throttle\n * @param {number} limit - Time limit in milliseconds\n * @returns {Function} Throttled function\n */\nexport function throttle(func, limit) {\n  let inThrottle;\n  return function executedFunction(...args) {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Creates a safe JSON stringify that handles circular references\n * @param {any} obj - Object to stringify\n * @param {number} space - Spacing for formatting\n * @returns {string} JSON string\n */\nexport function safeStringify(obj, space = 2) {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return '[Circular]';\n      }\n      seen.add(value);\n    }\n    if (typeof Node !== 'undefined' && value instanceof Node) {\n      return '<' + (value.nodeName || 'node').toLowerCase() + '>';\n    }\n    if (value instanceof Error) {\n      return value.stack || value.message || String(value);\n    }\n    return value;\n  }, space);\n}\n\n/**\n * Checks if device is mobile based on viewport width\n * @param {number} breakpoint - Mobile breakpoint in pixels\n * @returns {boolean} True if mobile\n */\nexport function isMobile(breakpoint = 768) {\n  return window.matchMedia(`(max-width: ${breakpoint}px)`).matches;\n}\n\n/**\n * Creates a promise that resolves after a delay\n * @param {number} ms - Delay in milliseconds\n * @returns {Promise<void>}\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Sanitizes code for safe template injection\n * @param {string} code - Code to sanitize\n * @returns {string} Sanitized code\n */\nexport function sanitizeCode(code) {\n  // Escape closing script tags to prevent breaking out of the script context\n  return code.replace(/<\\/(script)/gi, '<\\\\/$1');\n}\n","import { Logger } from '../core/logger.js';\nimport { fetchWithTimeout, sanitizeCode } from '../core/utils.js';\nimport {\n  TEMPLATE_LOAD_TIMEOUT_MS,\n  DEFAULT_TEMPLATE_PATH,\n  TEMPLATE_MARKERS\n} from '../core/constants.js';\n\n/**\n * Template engine for building sandboxed HTML execution environments\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class TemplateEngine {\n  /**\n   * Creates a new TemplateEngine instance\n   * @param {string} [templatePath] - Path to the HTML template file\n   * @param {Object} [options={}] - Configuration options\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(templatePath = DEFAULT_TEMPLATE_PATH, options = {}) {\n    this.templatePath = templatePath;\n    this.template = null;\n    this.isLoaded = false;\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'TemplateEngine',\n      redactSecrets: true\n    });\n  }\n\n  /**\n   * Forces a reload of the template from disk\n   */\n  forceReload() {\n    this.logger.info('Force reloading template...');\n    this.template = null;\n    this.isLoaded = false;\n  }\n\n  /**\n   * Initializes the template engine by loading the HTML template\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Starting initialization...');\n    if (this.isLoaded) {\n      this.logger.debug('Already loaded, skipping');\n      return;\n    }\n\n    try {\n      this.logger.debug('Fetching template from:', this.templatePath);\n      // Add cache busting to force reload\n      const cacheBuster = '?t=' + Date.now();\n      const response = await fetchWithTimeout(\n        this.templatePath + cacheBuster,\n        {},\n        TEMPLATE_LOAD_TIMEOUT_MS\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load template: ${response.status}`);\n      }\n      \n      this.template = await response.text();\n      \n      // Validate template has required markers\n      this.validateTemplate();\n      \n      this.logger.info('Template loaded successfully, length:', this.template.length);\n      this.logger.debug('Template preview:', this.template.substring(0, 200) + '...');\n      this.isLoaded = true;\n    } catch (error) {\n      this.logger.error('Failed to load sandbox template:', error.message);\n      this.logger.warn('Using fallback template');\n      this.template = this.getFallbackTemplate();\n      this.isLoaded = true;\n    }\n  }\n\n  /**\n   * Validates that the template contains required markers\n   * @throws {Error} If template is missing required markers\n   */\n  validateTemplate() {\n    const requiredMarkers = [\n      TEMPLATE_MARKERS.SECRET,\n      TEMPLATE_MARKERS.USER_CODE,\n      TEMPLATE_MARKERS.DYNAMIC_CSP,\n      TEMPLATE_MARKERS.LIBRARY_SCRIPTS\n    ];\n\n    const missingMarkers = requiredMarkers.filter(\n      marker => !this.template.includes(marker)\n    );\n\n    if (missingMarkers.length > 0) {\n      throw new Error(\n        `Template missing required markers: ${missingMarkers.join(', ')}`\n      );\n    }\n\n    this.logger.debug('Template validation passed');\n  }\n\n  /**\n   * Returns a fallback HTML template when the external template file fails to load\n   * @returns {string} The fallback HTML template\n   */\n  getFallbackTemplate() {\n    return `<!doctype html>\n<html><head><meta charset=\"utf-8\">\n<meta http-equiv=\"Content-Security-Policy\" content=\"${TEMPLATE_MARKERS.DYNAMIC_CSP}\">\n<title>Sandbox</title>\n${TEMPLATE_MARKERS.LIBRARY_SCRIPTS}\n<style>html,body{margin:0;padding:12px;font:14px/1.4 -apple-system, system-ui, Segoe UI, Roboto} body{background:#fff;color:#111}</style>\n</head><body>\n<script>\n(function(){\n  var SECRET = \"${TEMPLATE_MARKERS.SECRET}\";\n  var send = function(type){\n    var args = Array.prototype.slice.call(arguments,1);\n    try { parent.postMessage({ __sandbox: true, secret: SECRET, type: type, args: args }, \"*\"); } catch(e) {}\n  };\n  [\"log\",\"info\",\"warn\",\"error\"].forEach ? [\"log\",\"info\",\"warn\",\"error\"].forEach(function(m){\n    var original = console[m].bind(console);\n    console[m] = function(){ send.apply(null, [m].concat([].slice.call(arguments))); try { original.apply(console, arguments); } catch(_) {} };\n  }) : null;\n  addEventListener(\"error\", function(e){\n    send(\"error\", (e.error && (e.error.stack || e.error.message)) || (e.message + \" @\" + e.filename + \":\" + e.lineno + \":\" + e.colno));\n  });\n  addEventListener(\"unhandledrejection\", function(e){\n    var r = e.reason; send(\"error\", \"Unhandled rejection: \" + (r && (r.stack || r.message) || String(r)));\n  });\n  try {\n${TEMPLATE_MARKERS.USER_CODE}\n  } catch (err) {\n    try { console.error(err); } catch(_) {}\n  } finally {\n    setTimeout(function(){ send(\"done\"); }, 0);\n  }\n})();\n</script>\n</body></html>`;\n  }\n\n  /**\n   * Builds an HTML document with user code and security token injected\n   * @param {string} userCode - The user's JavaScript code to execute\n   * @param {string} secret - Security token for sandboxed communication\n   * @param {string} [libraryScripts=''] - HTML script tags for libraries\n   * @param {string} [dynamicCSP] - Dynamic CSP policy string\n   * @returns {string} Complete HTML document ready for iframe execution\n   */\n  buildSrcDoc(userCode, secret, libraryScripts = '', dynamicCSP = null) {\n    this.logger.debug('Building srcDoc...');\n    if (!this.isLoaded) {\n      throw new Error('TemplateEngine not initialized. Call initialize() first.');\n    }\n\n    // Sanitize user code\n    const sanitized = sanitizeCode(userCode);\n    const secretValue = String(secret);\n\n    // Add sourceURL to user code for better debugging\n    const userCodeWithSourceMap = `//# sourceURL=user-code.js\\n${sanitized}`;\n\n    // Use provided CSP or fallback to default\n    const cspPolicy = dynamicCSP || \"default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; connect-src 'none';\";\n\n    this.logger.trace('Replacing template markers');\n\n    // Replace all markers in sequence\n    let result = this.template;\n\n    result = result.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.SECRET), 'g'),\n      secretValue\n    );\n\n    result = result.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.USER_CODE), 'g'),\n      userCodeWithSourceMap\n    );\n\n    result = result.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.LIBRARY_SCRIPTS), 'g'),\n      libraryScripts\n    );\n\n    result = result.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.DYNAMIC_CSP), 'g'),\n      cspPolicy\n    );\n\n    this.logger.debug('Template replacement complete');\n    this.logger.trace('Result preview:', result.substring(0, 500) + '...');\n\n    if (libraryScripts) {\n      this.logger.info('Libraries injected:', libraryScripts.split('<script').length - 1);\n    }\n\n    return result;\n  }\n\n  /**\n   * Escapes special regex characters in a string\n   * @param {string} str - String to escape\n   * @returns {string} Escaped string\n   */\n  escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n","import { TemplateEngine } from '../ui/sandbox.js';\nimport { Logger } from './logger.js';\nimport { DEFAULT_TIMEOUT_MS, CRYPTO_ARRAY_SIZE } from './constants.js';\n\n/**\n * Sandboxed JavaScript execution engine using iframe isolation\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class SandboxEngine {\n  /**\n   * Creates a new SandboxEngine instance\n   * @param {HTMLElement} container - DOM element to contain the sandbox iframe\n   * @param {Object} [options={}] - Configuration options\n   * @param {number} [options.timeLimit] - Execution timeout in milliseconds\n   * @param {Function} [options.onMessage] - Callback for sandbox messages\n   * @param {Function} [options.onStatusChange] - Callback for status updates\n   * @param {string} [options.templatePath] - Path to custom sandbox template\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.timeLimit = options.timeLimit || DEFAULT_TIMEOUT_MS;\n    this.onMessage = options.onMessage || (() => {});\n    this.onStatusChange = options.onStatusChange || (() => {});\n\n    this.iframe = null;\n    this.killTimer = null;\n    this.currentSecret = this.generateSecret();\n    this.messageHandler = null;\n\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'SandboxEngine',\n      redactSecrets: true\n    });\n\n    this.templateEngine = new TemplateEngine(options.templatePath, {\n      debug: options.debug,\n      logLevel: options.logLevel\n    });\n\n    this.createIframe();\n    this.setupMessageListener();\n  }\n\n  /**\n   * Initializes the sandbox engine and template system\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Initializing...');\n    \n    try {\n      await this.templateEngine.initialize();\n      this.logger.info('Template engine initialized');\n    } catch (error) {\n      this.logger.error('Template initialization failed:', error);\n      throw new Error(`Sandbox initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generates a cryptographically secure random secret for sandbox communication\n   * @returns {string} Random secret token\n   */\n  generateSecret() {\n    try {\n      if (window.crypto && window.crypto.getRandomValues) {\n        const arr = new Uint32Array(CRYPTO_ARRAY_SIZE);\n        window.crypto.getRandomValues(arr);\n        return String(arr[0]) + String(arr[1]);\n      }\n    } catch (e) {\n      this.logger.warn('Crypto API unavailable, using fallback', e);\n    }\n    return String(Math.random()).slice(2) + Date.now();\n  }\n\n  /**\n   * Creates a new sandboxed iframe element\n   */\n  createIframe() {\n    // Clear the entire container to ensure no duplicates\n    this.container.innerHTML = '';\n\n    this.iframe = document.createElement('iframe');\n    this.iframe.className = 'sandbox-iframe';\n    this.iframe.setAttribute('sandbox', 'allow-scripts allow-modals');\n    this.iframe.title = 'Code Sandbox';\n    this.container.appendChild(this.iframe);\n  }\n\n  /**\n   * Resets the sandbox by creating a fresh iframe\n   */\n  reset() {\n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n      this.killTimer = null;\n    }\n    this.createIframe();\n    this.onStatusChange('reset');\n  }\n\n  /**\n   * Validates JavaScript syntax without executing it\n   * @param {string} code - The JavaScript code to validate\n   * @returns {Object} Validation result with {valid: boolean, error?: string}\n   */\n  validateSyntax(code) {\n    try {\n      // Use Function constructor to check syntax without executing\n      new Function(code);\n      return { valid: true };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message,\n        name: error.name,\n        toString: () => `${error.name}: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Executes JavaScript code in the sandboxed iframe\n   * @param {string} code - The JavaScript code to execute\n   * @param {Object} [libraryData] - Optional library injection data\n   * @param {string} [libraryData.scripts] - HTML script tags for libraries\n   * @param {string} [libraryData.csp] - Dynamic CSP policy\n   * @returns {Promise<void>}\n   */\n  async execute(code, libraryData = null) {\n    this.logger.debug('Executing code...');\n\n    // Ensure template is loaded before execution\n    if (!this.templateEngine.isLoaded) {\n      this.logger.debug('Template not loaded, initializing...');\n      await this.templateEngine.initialize();\n    }\n\n    // First, validate syntax\n    const validation = this.validateSyntax(code);\n    if (!validation.valid) {\n      this.logger.debug('Syntax error detected:', validation.error);\n      this.onMessage('error', [validation.toString()]);\n      this.onStatusChange('completed');\n      return;\n    }\n\n    this.currentSecret = this.generateSecret();\n    this.logger.trace('Generated secret for execution');\n\n    // Extract library data if provided\n    const libraryScripts = libraryData?.scripts || '';\n    const dynamicCSP = libraryData?.csp || null;\n\n    const srcdoc = this.templateEngine.buildSrcDoc(code, this.currentSecret, libraryScripts, dynamicCSP);\n    this.logger.debug('Setting iframe srcdoc...');\n\n    if (libraryData?.scripts) {\n      this.logger.info('Injecting libraries into sandbox');\n    }\n\n    this.iframe.srcdoc = srcdoc;\n    this.onStatusChange('executing');\n\n    if (this.killTimer) clearTimeout(this.killTimer);\n    this.killTimer = setTimeout(() => {\n      this.onMessage('error', [`⏱️ Execution timeout (${this.timeLimit}ms). Sandbox reset.`]);\n      this.reset();\n      this.onStatusChange('timeout');\n    }, this.timeLimit);\n  }\n\n  /**\n   * Sets up the postMessage listener for communication with the sandboxed iframe\n   */\n  setupMessageListener() {\n    // Remove existing listener if any\n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n    }\n\n    // Create bound handler for proper removal later\n    this.messageHandler = (ev) => {\n      if (ev.source !== this.iframe?.contentWindow) return;\n      const data = ev.data || {};\n      if (!data.__sandbox || data.secret !== this.currentSecret) return;\n\n      const type = data.type || 'log';\n      const args = Array.isArray(data.args) ? data.args : [data.args];\n\n      if (type === 'done') {\n        if (this.killTimer) {\n          clearTimeout(this.killTimer);\n          this.killTimer = null;\n        }\n        this.onStatusChange('completed');\n        return;\n      }\n\n      this.onMessage(type, args);\n    };\n\n    window.addEventListener('message', this.messageHandler);\n  }\n\n  /**\n   * Cleans up the sandbox engine by removing timers and DOM elements\n   */\n  destroy() {\n    this.logger.info('Destroying sandbox engine...');\n    \n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n      this.killTimer = null;\n    }\n    \n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n      this.messageHandler = null;\n    }\n    \n    if (this.iframe) {\n      this.iframe.remove();\n      this.iframe = null;\n    }\n    \n    this.logger.info('Sandbox engine destroyed');\n  }\n}\n","import { safeStringify } from './utils.js';\nimport { Logger } from './logger.js';\n\n/**\n * Console output renderer for displaying sandboxed code execution results\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class ConsoleOutput {\n  /**\n   * Creates a new ConsoleOutput instance\n   * @param {HTMLElement} container - The DOM element to render console output in\n   * @param {Object} [options={}] - Configuration options\n   * @param {boolean} [options.debug=false] - Enable debug logging\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.logger = new Logger({\n      enabled: options.debug || false,\n      level: 'warn',\n      prefix: 'ConsoleOutput'\n    });\n  }\n\n  /**\n   * Clears all console output\n   */\n  clear() {\n    this.container.innerHTML = '';\n  }\n\n  /**\n   * Adds a new line to the console output\n   * @param {string} type - The log type (log, info, warn, error)\n   * @param {Array} args - The arguments to display\n   */\n  addLine(type, args) {\n    try {\n      const div = document.createElement('div');\n      div.className = `console-line console-${type}`;\n      div.textContent = args.map(arg => this.formatArg(arg)).join(' ');\n      this.container.appendChild(div);\n      this.container.scrollTop = this.container.scrollHeight;\n    } catch (error) {\n      this.logger.error('Failed to add console line:', error);\n    }\n  }\n\n  /**\n   * Formats a value for display in the console\n   * @param {any} value - The value to format\n   * @returns {string} The formatted string representation\n   */\n  formatArg(value) {\n    try {\n      // Handle Error objects\n      if (value instanceof Error) {\n        return value.stack || value.message || String(value);\n      }\n    } catch (e) {\n      this.logger.warn('Error checking instanceof Error:', e);\n    }\n\n    const type = typeof value;\n    \n    // Handle primitive types\n    if (type === 'string') return value;\n    if (type === 'number' || type === 'boolean' || value === null) {\n      return String(value);\n    }\n    if (type === 'undefined') return 'undefined';\n\n    // Handle DOM nodes\n    try {\n      if (typeof Node !== 'undefined' && value instanceof Node) {\n        return '<' + (value.nodeName || 'node').toLowerCase() + '>';\n      }\n    } catch (e) {\n      this.logger.warn('Error checking instanceof Node:', e);\n    }\n\n    // Handle objects and arrays\n    try {\n      return safeStringify(value);\n    } catch (e) {\n      this.logger.warn('Failed to stringify value:', e);\n      return String(value);\n    }\n  }\n}\n","/**\n * Event system for external communication with the sandbox\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EventEmitter {\n  /**\n   * Creates a new EventEmitter instance\n   */\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * Registers an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @param {Object} [options={}] - Options for the listener\n   * @param {boolean} [options.once=false] - Whether to remove after first call\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, callback, options = {}) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n\n    const listener = {\n      callback,\n      once: options.once || false\n    };\n\n    this.events.get(event).push(listener);\n\n    // Return unsubscribe function\n    return () => this.off(event, callback);\n  }\n\n  /**\n   * Registers a one-time event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, callback) {\n    return this.on(event, callback, { once: true });\n  }\n\n  /**\n   * Removes an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function to remove\n   */\n  off(event, callback) {\n    if (!this.events.has(event)) return;\n\n    const listeners = this.events.get(event);\n    const index = listeners.findIndex(listener => listener.callback === callback);\n\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n  }\n\n  /**\n   * Emits an event to all registered listeners\n   * @param {string} event - The event name\n   * @param {...any} args - Arguments to pass to listeners\n   * @returns {boolean} True if any listeners were called\n   */\n  emit(event, ...args) {\n    if (!this.events.has(event)) return false;\n\n    const listeners = this.events.get(event);\n    const listenersToRemove = [];\n\n    listeners.forEach((listener, index) => {\n      try {\n        listener.callback(...args);\n        if (listener.once) {\n          listenersToRemove.push(index);\n        }\n      } catch (error) {\n        console.error(`Error in event listener for '${event}':`, error);\n      }\n    });\n\n    // Remove one-time listeners (in reverse order to maintain indices)\n    listenersToRemove.reverse().forEach(index => {\n      listeners.splice(index, 1);\n    });\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes all listeners for an event, or all listeners if no event specified\n   * @param {string} [event] - The event name, or undefined to clear all\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n\n  /**\n   * Returns an array of event names that have listeners\n   * @returns {Array<string>} Array of event names\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n\n  /**\n   * Returns the number of listeners for an event\n   * @param {string} event - The event name\n   * @returns {number} Number of listeners\n   */\n  listenerCount(event) {\n    return this.events.has(event) ? this.events.get(event).length : 0;\n  }\n}"],"names":["async","fetchWithTimeout","url","options","timeout","NETWORK_TIMEOUT_MS","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","error","name","Error","isMobile","breakpoint","window","matchMedia","matches","TemplateEngine","constructor","templatePath","DEFAULT_TEMPLATE_PATH","this","template","isLoaded","logger","Logger","enabled","debug","level","logLevel","prefix","redactSecrets","forceReload","info","initialize","cacheBuster","Date","now","TEMPLATE_LOAD_TIMEOUT_MS","ok","status","text","validateTemplate","length","substring","message","warn","getFallbackTemplate","missingMarkers","TEMPLATE_MARKERS","SECRET","USER_CODE","DYNAMIC_CSP","LIBRARY_SCRIPTS","filter","marker","includes","join","buildSrcDoc","userCode","secret","libraryScripts","dynamicCSP","sanitized","replace","secretValue","String","userCodeWithSourceMap","cspPolicy","trace","result","RegExp","escapeRegExp","split","str","SandboxEngine","container","timeLimit","DEFAULT_TIMEOUT_MS","onMessage","onStatusChange","iframe","killTimer","currentSecret","generateSecret","messageHandler","templateEngine","createIframe","setupMessageListener","crypto","getRandomValues","arr","Uint32Array","CRYPTO_ARRAY_SIZE","e","Math","random","slice","innerHTML","document","createElement","className","setAttribute","title","appendChild","reset","validateSyntax","code","Function","valid","toString","execute","libraryData","validation","scripts","csp","srcdoc","removeEventListener","ev","source","contentWindow","data","__sandbox","type","args","Array","isArray","addEventListener","destroy","remove","ConsoleOutput","clear","addLine","div","textContent","map","arg","formatArg","scrollTop","scrollHeight","value","stack","Node","nodeName","toLowerCase","obj","space","seen","WeakSet","JSON","stringify","key","has","add","safeStringify","EventEmitter","events","Map","on","event","callback","set","listener","once","get","push","off","listeners","index","findIndex","splice","delete","emit","listenersToRemove","forEach","console","reverse","removeAllListeners","eventNames","from","keys","listenerCount"],"mappings":"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"}