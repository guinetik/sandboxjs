{"version":3,"file":"core-Db2HR9Ww.js","sources":["../../src/core/utils.js","../../src/ui/sandbox.js","../../src/core/sandbox.js","../../src/core/console.js","../../src/core/events.js"],"sourcesContent":["/**\r\n * Utility functions for the sandbox application\r\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\r\n */\r\n\r\nimport { NETWORK_TIMEOUT_MS } from './constants.js';\r\n\r\n/**\r\n * Creates a fetch request with timeout\r\n * @param {string} url - The URL to fetch\r\n * @param {Object} options - Fetch options\r\n * @param {number} timeout - Timeout in milliseconds\r\n * @returns {Promise<Response>} The fetch response\r\n */\r\nexport async function fetchWithTimeout(url, options = {}, timeout = NETWORK_TIMEOUT_MS) {\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      signal: controller.signal\r\n    });\r\n    clearTimeout(timeoutId);\r\n    return response;\r\n  } catch (error) {\r\n    clearTimeout(timeoutId);\r\n    if (error.name === 'AbortError') {\r\n      throw new Error(`Request timeout after ${timeout}ms`);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Escapes HTML to prevent XSS\r\n * @param {string} text - Text to escape\r\n * @returns {string} Escaped text\r\n */\r\nexport function escapeHtml(text) {\r\n  const div = document.createElement('div');\r\n  div.textContent = text;\r\n  return div.innerHTML;\r\n}\r\n\r\n/**\r\n * Debounces a function\r\n * @param {Function} func - Function to debounce\r\n * @param {number} wait - Wait time in milliseconds\r\n * @returns {Function} Debounced function\r\n */\r\nexport function debounce(func, wait) {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n}\r\n\r\n/**\r\n * Throttles a function\r\n * @param {Function} func - Function to throttle\r\n * @param {number} limit - Time limit in milliseconds\r\n * @returns {Function} Throttled function\r\n */\r\nexport function throttle(func, limit) {\r\n  let inThrottle;\r\n  return function executedFunction(...args) {\r\n    if (!inThrottle) {\r\n      func(...args);\r\n      inThrottle = true;\r\n      setTimeout(() => inThrottle = false, limit);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a safe JSON stringify that handles circular references\r\n * @param {any} obj - Object to stringify\r\n * @param {number} space - Spacing for formatting\r\n * @returns {string} JSON string\r\n */\r\nexport function safeStringify(obj, space = 2) {\r\n  const seen = new WeakSet();\r\n  return JSON.stringify(obj, (key, value) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (seen.has(value)) {\r\n        return '[Circular]';\r\n      }\r\n      seen.add(value);\r\n    }\r\n    if (typeof Node !== 'undefined' && value instanceof Node) {\r\n      return '<' + (value.nodeName || 'node').toLowerCase() + '>';\r\n    }\r\n    if (value instanceof Error) {\r\n      return value.stack || value.message || String(value);\r\n    }\r\n    return value;\r\n  }, space);\r\n}\r\n\r\n/**\r\n * Checks if device is mobile based on viewport width\r\n * @param {number} breakpoint - Mobile breakpoint in pixels\r\n * @returns {boolean} True if mobile\r\n */\r\nexport function isMobile(breakpoint = 768) {\r\n  return window.matchMedia(`(max-width: ${breakpoint}px)`).matches;\r\n}\r\n\r\n/**\r\n * Creates a promise that resolves after a delay\r\n * @param {number} ms - Delay in milliseconds\r\n * @returns {Promise<void>}\r\n */\r\nexport function delay(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n/**\r\n * Sanitizes code for safe template injection\r\n * @param {string} code - Code to sanitize\r\n * @returns {string} Sanitized code\r\n */\r\nexport function sanitizeCode(code) {\r\n  // Escape closing script tags to prevent breaking out of the script context\r\n  return code.replace(/<\\/(script)/gi, '<\\\\/$1');\r\n}\r\n","import { Logger } from '../core/logger.js';\r\nimport { fetchWithTimeout, sanitizeCode } from '../core/utils.js';\r\nimport {\r\n  TEMPLATE_LOAD_TIMEOUT_MS,\r\n  DEFAULT_TEMPLATE_PATH,\r\n  TEMPLATE_MARKERS\r\n} from '../core/constants.js';\r\n\r\n/**\r\n * Template engine for building sandboxed HTML execution environments\r\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\r\n */\r\nexport class TemplateEngine {\r\n  /**\r\n   * Creates a new TemplateEngine instance\r\n   * @param {string} [templatePath] - Path to the HTML template file\r\n   * @param {Object} [options={}] - Configuration options\r\n   * @param {boolean} [options.debug=true] - Enable debug logging\r\n   * @param {string} [options.logLevel='info'] - Log level for debugging\r\n   */\r\n  constructor(templatePath = DEFAULT_TEMPLATE_PATH, options = {}) {\r\n    this.templatePath = templatePath;\r\n    this.template = null;\r\n    this.isLoaded = false;\r\n    this.logger = new Logger({\r\n      enabled: options.debug !== false,\r\n      level: options.logLevel || 'info',\r\n      prefix: 'TemplateEngine',\r\n      redactSecrets: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Forces a reload of the template from disk\r\n   */\r\n  forceReload() {\r\n    this.logger.info('Force reloading template...');\r\n    this.template = null;\r\n    this.isLoaded = false;\r\n  }\r\n\r\n  /**\r\n   * Initializes the template engine by loading the HTML template\r\n   * @returns {Promise<void>}\r\n   */\r\n  async initialize() {\r\n    this.logger.info('Starting initialization...');\r\n    if (this.isLoaded) {\r\n      this.logger.debug('Already loaded, skipping');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.logger.debug('Fetching template from:', this.templatePath);\r\n      // Add cache busting to force reload\r\n      const cacheBuster = '?t=' + Date.now();\r\n      const response = await fetchWithTimeout(\r\n        this.templatePath + cacheBuster,\r\n        {},\r\n        TEMPLATE_LOAD_TIMEOUT_MS\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load template: ${response.status}`);\r\n      }\r\n      \r\n      this.template = await response.text();\r\n      \r\n      // Validate template has required markers\r\n      this.validateTemplate();\r\n      \r\n      this.logger.info('Template loaded successfully, length:', this.template.length);\r\n      this.logger.debug('Template preview:', this.template.substring(0, 200) + '...');\r\n      this.isLoaded = true;\r\n    } catch (error) {\r\n      this.logger.error('Failed to load sandbox template:', error.message);\r\n      this.logger.warn('Using fallback template');\r\n      this.template = this.getFallbackTemplate();\r\n      this.isLoaded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates that the template contains required markers\r\n   * @throws {Error} If template is missing required markers\r\n   */\r\n  validateTemplate() {\r\n    const requiredMarkers = [\r\n      TEMPLATE_MARKERS.SECRET,\r\n      TEMPLATE_MARKERS.USER_CODE\r\n    ];\r\n\r\n    const missingMarkers = requiredMarkers.filter(\r\n      marker => !this.template.includes(marker)\r\n    );\r\n\r\n    if (missingMarkers.length > 0) {\r\n      throw new Error(\r\n        `Template missing required markers: ${missingMarkers.join(', ')}`\r\n      );\r\n    }\r\n\r\n    this.logger.debug('Template validation passed');\r\n  }\r\n\r\n  /**\r\n   * Returns a fallback HTML template when the external template file fails to load\r\n   * @returns {string} The fallback HTML template\r\n   */\r\n  getFallbackTemplate() {\r\n    return `<!doctype html>\r\n<html><head><meta charset=\"utf-8\"><title>Sandbox</title>\r\n<style>html,body{margin:0;padding:12px;font:14px/1.4 -apple-system, system-ui, Segoe UI, Roboto} body{background:#fff;color:#111}</style>\r\n</head><body>\r\n<script>\r\n(function(){\r\n  var SECRET = \"${TEMPLATE_MARKERS.SECRET}\";\r\n  var send = function(type){\r\n    var args = Array.prototype.slice.call(arguments,1);\r\n    try { parent.postMessage({ __sandbox: true, secret: SECRET, type: type, args: args }, \"*\"); } catch(e) {}\r\n  };\r\n  [\"log\",\"info\",\"warn\",\"error\"].forEach ? [\"log\",\"info\",\"warn\",\"error\"].forEach(function(m){\r\n    var original = console[m].bind(console);\r\n    console[m] = function(){ send.apply(null, [m].concat([].slice.call(arguments))); try { original.apply(console, arguments); } catch(_) {} };\r\n  }) : null;\r\n  addEventListener(\"error\", function(e){\r\n    send(\"error\", (e.error && (e.error.stack || e.error.message)) || (e.message + \" @\" + e.filename + \":\" + e.lineno + \":\" + e.colno));\r\n  });\r\n  addEventListener(\"unhandledrejection\", function(e){\r\n    var r = e.reason; send(\"error\", \"Unhandled rejection: \" + (r && (r.stack || r.message) || String(r)));\r\n  });\r\n  try {\r\n${TEMPLATE_MARKERS.USER_CODE}\r\n  } catch (err) {\r\n    try { console.error(err); } catch(_) {}\r\n  } finally {\r\n    setTimeout(function(){ send(\"done\"); }, 0);\r\n  }\r\n})();\r\n</script>\r\n</body></html>`;\r\n  }\r\n\r\n  /**\r\n   * Builds an HTML document with user code and security token injected\r\n   * @param {string} userCode - The user's JavaScript code to execute\r\n   * @param {string} secret - Security token for sandboxed communication\r\n   * @returns {string} Complete HTML document ready for iframe execution\r\n   */\r\n  buildSrcDoc(userCode, secret) {\r\n    this.logger.debug('Building srcDoc...');\r\n    if (!this.isLoaded) {\r\n      throw new Error('TemplateEngine not initialized. Call initialize() first.');\r\n    }\r\n\r\n    // Sanitize user code\r\n    const sanitized = sanitizeCode(userCode);\r\n    const secretValue = String(secret);\r\n\r\n    // Add sourceURL to user code for better debugging\r\n    const userCodeWithSourceMap = `//# sourceURL=user-code.js\\n${sanitized}`;\r\n\r\n    this.logger.trace('Replacing template markers');\r\n\r\n    // Replace markers\r\n    const afterSecret = this.template.replace(\r\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.SECRET), 'g'),\r\n      secretValue\r\n    );\r\n    \r\n    const result = afterSecret.replace(\r\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.USER_CODE), 'g'),\r\n      userCodeWithSourceMap\r\n    );\r\n\r\n    this.logger.debug('Template replacement complete');\r\n    this.logger.trace('Result preview:', result.substring(0, 500) + '...');\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Escapes special regex characters in a string\r\n   * @param {string} str - String to escape\r\n   * @returns {string} Escaped string\r\n   */\r\n  escapeRegExp(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n}\r\n","import { TemplateEngine } from '../ui/sandbox.js';\r\nimport { Logger } from './logger.js';\r\nimport { DEFAULT_TIMEOUT_MS, CRYPTO_ARRAY_SIZE } from './constants.js';\r\n\r\n/**\r\n * Sandboxed JavaScript execution engine using iframe isolation\r\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\r\n */\r\nexport class SandboxEngine {\r\n  /**\r\n   * Creates a new SandboxEngine instance\r\n   * @param {HTMLElement} container - DOM element to contain the sandbox iframe\r\n   * @param {Object} [options={}] - Configuration options\r\n   * @param {number} [options.timeLimit] - Execution timeout in milliseconds\r\n   * @param {Function} [options.onMessage] - Callback for sandbox messages\r\n   * @param {Function} [options.onStatusChange] - Callback for status updates\r\n   * @param {string} [options.templatePath] - Path to custom sandbox template\r\n   * @param {boolean} [options.debug=true] - Enable debug logging\r\n   * @param {string} [options.logLevel='info'] - Log level for debugging\r\n   */\r\n  constructor(container, options = {}) {\r\n    this.container = container;\r\n    this.timeLimit = options.timeLimit || DEFAULT_TIMEOUT_MS;\r\n    this.onMessage = options.onMessage || (() => {});\r\n    this.onStatusChange = options.onStatusChange || (() => {});\r\n\r\n    this.iframe = null;\r\n    this.killTimer = null;\r\n    this.currentSecret = this.generateSecret();\r\n    this.messageHandler = null;\r\n\r\n    this.logger = new Logger({\r\n      enabled: options.debug !== false,\r\n      level: options.logLevel || 'info',\r\n      prefix: 'SandboxEngine',\r\n      redactSecrets: true\r\n    });\r\n\r\n    this.templateEngine = new TemplateEngine(options.templatePath, {\r\n      debug: options.debug,\r\n      logLevel: options.logLevel\r\n    });\r\n\r\n    this.createIframe();\r\n    this.setupMessageListener();\r\n  }\r\n\r\n  /**\r\n   * Initializes the sandbox engine and template system\r\n   * @returns {Promise<void>}\r\n   */\r\n  async initialize() {\r\n    this.logger.info('Initializing...');\r\n    \r\n    try {\r\n      await this.templateEngine.initialize();\r\n      this.logger.info('Template engine initialized');\r\n    } catch (error) {\r\n      this.logger.error('Template initialization failed:', error);\r\n      throw new Error(`Sandbox initialization failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a cryptographically secure random secret for sandbox communication\r\n   * @returns {string} Random secret token\r\n   */\r\n  generateSecret() {\r\n    try {\r\n      if (window.crypto && window.crypto.getRandomValues) {\r\n        const arr = new Uint32Array(CRYPTO_ARRAY_SIZE);\r\n        window.crypto.getRandomValues(arr);\r\n        return String(arr[0]) + String(arr[1]);\r\n      }\r\n    } catch (e) {\r\n      this.logger.warn('Crypto API unavailable, using fallback', e);\r\n    }\r\n    return String(Math.random()).slice(2) + Date.now();\r\n  }\r\n\r\n  /**\r\n   * Creates a new sandboxed iframe element\r\n   */\r\n  createIframe() {\r\n    // Clear the entire container to ensure no duplicates\r\n    this.container.innerHTML = '';\r\n\r\n    this.iframe = document.createElement('iframe');\r\n    this.iframe.className = 'sandbox-iframe';\r\n    this.iframe.setAttribute('sandbox', 'allow-scripts allow-modals');\r\n    this.iframe.title = 'Code Sandbox';\r\n    this.container.appendChild(this.iframe);\r\n  }\r\n\r\n  /**\r\n   * Resets the sandbox by creating a fresh iframe\r\n   */\r\n  reset() {\r\n    if (this.killTimer) {\r\n      clearTimeout(this.killTimer);\r\n      this.killTimer = null;\r\n    }\r\n    this.createIframe();\r\n    this.onStatusChange('reset');\r\n  }\r\n\r\n  /**\r\n   * Validates JavaScript syntax without executing it\r\n   * @param {string} code - The JavaScript code to validate\r\n   * @returns {Object} Validation result with {valid: boolean, error?: string}\r\n   */\r\n  validateSyntax(code) {\r\n    try {\r\n      // Use Function constructor to check syntax without executing\r\n      new Function(code);\r\n      return { valid: true };\r\n    } catch (error) {\r\n      return {\r\n        valid: false,\r\n        error: error.message,\r\n        name: error.name,\r\n        toString: () => `${error.name}: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes JavaScript code in the sandboxed iframe\r\n   * @param {string} code - The JavaScript code to execute\r\n   * @returns {Promise<void>}\r\n   */\r\n  async execute(code) {\r\n    this.logger.debug('Executing code...');\r\n\r\n    // Ensure template is loaded before execution\r\n    if (!this.templateEngine.isLoaded) {\r\n      this.logger.debug('Template not loaded, initializing...');\r\n      await this.templateEngine.initialize();\r\n    }\r\n\r\n    // First, validate syntax\r\n    const validation = this.validateSyntax(code);\r\n    if (!validation.valid) {\r\n      this.logger.debug('Syntax error detected:', validation.error);\r\n      this.onMessage('error', [validation.toString()]);\r\n      this.onStatusChange('completed');\r\n      return;\r\n    }\r\n\r\n    this.currentSecret = this.generateSecret();\r\n    this.logger.trace('Generated secret for execution');\r\n\r\n    const srcdoc = this.templateEngine.buildSrcDoc(code, this.currentSecret);\r\n    this.logger.debug('Setting iframe srcdoc...');\r\n\r\n    this.iframe.srcdoc = srcdoc;\r\n    this.onStatusChange('executing');\r\n\r\n    if (this.killTimer) clearTimeout(this.killTimer);\r\n    this.killTimer = setTimeout(() => {\r\n      this.onMessage('error', [`⏱️ Execution timeout (${this.timeLimit}ms). Sandbox reset.`]);\r\n      this.reset();\r\n      this.onStatusChange('timeout');\r\n    }, this.timeLimit);\r\n  }\r\n\r\n  /**\r\n   * Sets up the postMessage listener for communication with the sandboxed iframe\r\n   */\r\n  setupMessageListener() {\r\n    // Remove existing listener if any\r\n    if (this.messageHandler) {\r\n      window.removeEventListener('message', this.messageHandler);\r\n    }\r\n\r\n    // Create bound handler for proper removal later\r\n    this.messageHandler = (ev) => {\r\n      if (ev.source !== this.iframe?.contentWindow) return;\r\n      const data = ev.data || {};\r\n      if (!data.__sandbox || data.secret !== this.currentSecret) return;\r\n\r\n      const type = data.type || 'log';\r\n      const args = Array.isArray(data.args) ? data.args : [data.args];\r\n\r\n      if (type === 'done') {\r\n        if (this.killTimer) {\r\n          clearTimeout(this.killTimer);\r\n          this.killTimer = null;\r\n        }\r\n        this.onStatusChange('completed');\r\n        return;\r\n      }\r\n\r\n      this.onMessage(type, args);\r\n    };\r\n\r\n    window.addEventListener('message', this.messageHandler);\r\n  }\r\n\r\n  /**\r\n   * Cleans up the sandbox engine by removing timers and DOM elements\r\n   */\r\n  destroy() {\r\n    this.logger.info('Destroying sandbox engine...');\r\n    \r\n    if (this.killTimer) {\r\n      clearTimeout(this.killTimer);\r\n      this.killTimer = null;\r\n    }\r\n    \r\n    if (this.messageHandler) {\r\n      window.removeEventListener('message', this.messageHandler);\r\n      this.messageHandler = null;\r\n    }\r\n    \r\n    if (this.iframe) {\r\n      this.iframe.remove();\r\n      this.iframe = null;\r\n    }\r\n    \r\n    this.logger.info('Sandbox engine destroyed');\r\n  }\r\n}\r\n","import { safeStringify } from './utils.js';\r\nimport { Logger } from './logger.js';\r\n\r\n/**\r\n * Console output renderer for displaying sandboxed code execution results\r\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\r\n */\r\nexport class ConsoleOutput {\r\n  /**\r\n   * Creates a new ConsoleOutput instance\r\n   * @param {HTMLElement} container - The DOM element to render console output in\r\n   * @param {Object} [options={}] - Configuration options\r\n   * @param {boolean} [options.debug=false] - Enable debug logging\r\n   */\r\n  constructor(container, options = {}) {\r\n    this.container = container;\r\n    this.logger = new Logger({\r\n      enabled: options.debug || false,\r\n      level: 'warn',\r\n      prefix: 'ConsoleOutput'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears all console output\r\n   */\r\n  clear() {\r\n    this.container.innerHTML = '';\r\n  }\r\n\r\n  /**\r\n   * Adds a new line to the console output\r\n   * @param {string} type - The log type (log, info, warn, error)\r\n   * @param {Array} args - The arguments to display\r\n   */\r\n  addLine(type, args) {\r\n    try {\r\n      const div = document.createElement('div');\r\n      div.className = `console-line console-${type}`;\r\n      div.textContent = args.map(arg => this.formatArg(arg)).join(' ');\r\n      this.container.appendChild(div);\r\n      this.container.scrollTop = this.container.scrollHeight;\r\n    } catch (error) {\r\n      this.logger.error('Failed to add console line:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats a value for display in the console\r\n   * @param {any} value - The value to format\r\n   * @returns {string} The formatted string representation\r\n   */\r\n  formatArg(value) {\r\n    try {\r\n      // Handle Error objects\r\n      if (value instanceof Error) {\r\n        return value.stack || value.message || String(value);\r\n      }\r\n    } catch (e) {\r\n      this.logger.warn('Error checking instanceof Error:', e);\r\n    }\r\n\r\n    const type = typeof value;\r\n    \r\n    // Handle primitive types\r\n    if (type === 'string') return value;\r\n    if (type === 'number' || type === 'boolean' || value === null) {\r\n      return String(value);\r\n    }\r\n    if (type === 'undefined') return 'undefined';\r\n\r\n    // Handle DOM nodes\r\n    try {\r\n      if (typeof Node !== 'undefined' && value instanceof Node) {\r\n        return '<' + (value.nodeName || 'node').toLowerCase() + '>';\r\n      }\r\n    } catch (e) {\r\n      this.logger.warn('Error checking instanceof Node:', e);\r\n    }\r\n\r\n    // Handle objects and arrays\r\n    try {\r\n      return safeStringify(value);\r\n    } catch (e) {\r\n      this.logger.warn('Failed to stringify value:', e);\r\n      return String(value);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Event system for external communication with the sandbox\r\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\r\n */\r\nexport class EventEmitter {\r\n  /**\r\n   * Creates a new EventEmitter instance\r\n   */\r\n  constructor() {\r\n    this.events = new Map();\r\n  }\r\n\r\n  /**\r\n   * Registers an event listener\r\n   * @param {string} event - The event name\r\n   * @param {Function} callback - The callback function\r\n   * @param {Object} [options={}] - Options for the listener\r\n   * @param {boolean} [options.once=false] - Whether to remove after first call\r\n   * @returns {Function} Unsubscribe function\r\n   */\r\n  on(event, callback, options = {}) {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n\r\n    const listener = {\r\n      callback,\r\n      once: options.once || false\r\n    };\r\n\r\n    this.events.get(event).push(listener);\r\n\r\n    // Return unsubscribe function\r\n    return () => this.off(event, callback);\r\n  }\r\n\r\n  /**\r\n   * Registers a one-time event listener\r\n   * @param {string} event - The event name\r\n   * @param {Function} callback - The callback function\r\n   * @returns {Function} Unsubscribe function\r\n   */\r\n  once(event, callback) {\r\n    return this.on(event, callback, { once: true });\r\n  }\r\n\r\n  /**\r\n   * Removes an event listener\r\n   * @param {string} event - The event name\r\n   * @param {Function} callback - The callback function to remove\r\n   */\r\n  off(event, callback) {\r\n    if (!this.events.has(event)) return;\r\n\r\n    const listeners = this.events.get(event);\r\n    const index = listeners.findIndex(listener => listener.callback === callback);\r\n\r\n    if (index > -1) {\r\n      listeners.splice(index, 1);\r\n    }\r\n\r\n    // Clean up empty event arrays\r\n    if (listeners.length === 0) {\r\n      this.events.delete(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event to all registered listeners\r\n   * @param {string} event - The event name\r\n   * @param {...any} args - Arguments to pass to listeners\r\n   * @returns {boolean} True if any listeners were called\r\n   */\r\n  emit(event, ...args) {\r\n    if (!this.events.has(event)) return false;\r\n\r\n    const listeners = this.events.get(event);\r\n    const listenersToRemove = [];\r\n\r\n    listeners.forEach((listener, index) => {\r\n      try {\r\n        listener.callback(...args);\r\n        if (listener.once) {\r\n          listenersToRemove.push(index);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error in event listener for '${event}':`, error);\r\n      }\r\n    });\r\n\r\n    // Remove one-time listeners (in reverse order to maintain indices)\r\n    listenersToRemove.reverse().forEach(index => {\r\n      listeners.splice(index, 1);\r\n    });\r\n\r\n    // Clean up empty event arrays\r\n    if (listeners.length === 0) {\r\n      this.events.delete(event);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners for an event, or all listeners if no event specified\r\n   * @param {string} [event] - The event name, or undefined to clear all\r\n   */\r\n  removeAllListeners(event) {\r\n    if (event) {\r\n      this.events.delete(event);\r\n    } else {\r\n      this.events.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an array of event names that have listeners\r\n   * @returns {Array<string>} Array of event names\r\n   */\r\n  eventNames() {\r\n    return Array.from(this.events.keys());\r\n  }\r\n\r\n  /**\r\n   * Returns the number of listeners for an event\r\n   * @param {string} event - The event name\r\n   * @returns {number} Number of listeners\r\n   */\r\n  listenerCount(event) {\r\n    return this.events.has(event) ? this.events.get(event).length : 0;\r\n  }\r\n}"],"names":["async","fetchWithTimeout","url","options","timeout","NETWORK_TIMEOUT_MS","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","error","name","Error","isMobile","breakpoint","window","matchMedia","matches","TemplateEngine","constructor","templatePath","DEFAULT_TEMPLATE_PATH","this","template","isLoaded","logger","Logger","enabled","debug","level","logLevel","prefix","redactSecrets","forceReload","info","initialize","cacheBuster","Date","now","TEMPLATE_LOAD_TIMEOUT_MS","ok","status","text","validateTemplate","length","substring","message","warn","getFallbackTemplate","missingMarkers","TEMPLATE_MARKERS","SECRET","USER_CODE","filter","marker","includes","join","buildSrcDoc","userCode","secret","sanitized","replace","secretValue","String","userCodeWithSourceMap","trace","result","RegExp","escapeRegExp","str","SandboxEngine","container","timeLimit","DEFAULT_TIMEOUT_MS","onMessage","onStatusChange","iframe","killTimer","currentSecret","generateSecret","messageHandler","templateEngine","createIframe","setupMessageListener","crypto","getRandomValues","arr","Uint32Array","CRYPTO_ARRAY_SIZE","e","Math","random","slice","innerHTML","document","createElement","className","setAttribute","title","appendChild","reset","validateSyntax","code","Function","valid","toString","execute","validation","srcdoc","removeEventListener","ev","source","contentWindow","data","__sandbox","type","args","Array","isArray","addEventListener","destroy","remove","ConsoleOutput","clear","addLine","div","textContent","map","arg","formatArg","scrollTop","scrollHeight","value","stack","Node","nodeName","toLowerCase","obj","space","seen","WeakSet","JSON","stringify","key","has","add","safeStringify","EventEmitter","events","Map","on","event","callback","set","listener","once","get","push","off","listeners","index","findIndex","splice","delete","emit","listenersToRemove","forEach","console","reverse","removeAllListeners","eventNames","from","keys","listenerCount"],"mappings":"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"}