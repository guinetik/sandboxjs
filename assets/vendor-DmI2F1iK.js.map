{"version":3,"file":"vendor-DmI2F1iK.js","sources":["../../src/editors/base.js","../../src/editors/codemirror.js"],"sourcesContent":["/**\n * Base class for editor adapters providing a common interface\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EditorAdapter {\n  /**\n   * Creates a new EditorAdapter instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.options = options;\n    this.changeHandlers = [];\n    this.executeHandlers = [];\n  }\n\n  /**\n   * Gets the current code value from the editor\n   * @returns {string} The current code\n   * @throws {Error} Must be implemented by subclass\n   */\n  getValue() {\n    throw new Error('getValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Sets the code value in the editor\n   * @param {string} code - The code to set\n   * @throws {Error} Must be implemented by subclass\n   */\n  setValue(code) {\n    throw new Error('setValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Registers a callback for code change events\n   * @param {Function} callback - Callback function to call when code changes\n   */\n  onChange(callback) {\n    this.changeHandlers.push(callback);\n  }\n\n  /**\n   * Registers a callback for code execution events (Ctrl+Enter)\n   * @param {Function} callback - Callback function to call when user executes code\n   */\n  onExecute(callback) {\n    this.executeHandlers.push(callback);\n  }\n\n  /**\n   * Focuses the editor\n   * @throws {Error} Must be implemented by subclass\n   */\n  focus() {\n    throw new Error('focus() must be implemented by editor adapter');\n  }\n\n  /**\n   * Triggers all registered change handlers\n   */\n  triggerChange() {\n    this.changeHandlers.forEach(handler => handler(this.getValue()));\n  }\n\n  /**\n   * Triggers all registered execute handlers\n   */\n  triggerExecute() {\n    this.executeHandlers.forEach(handler => handler());\n  }\n\n  /**\n   * Cleans up the editor instance\n   * Override if cleanup is needed\n   */\n  destroy() {\n    // Override if cleanup needed\n  }\n}","import { EditorAdapter } from './base.js';\n\n/**\n * CodeMirror editor adapter with syntax highlighting and advanced features\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class CodeMirrorEditor extends EditorAdapter {\n  /**\n   * Creates a new CodeMirrorEditor instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   * @param {string} [options.mode='javascript'] - CodeMirror language mode\n   * @param {string} [options.theme='darcula'] - CodeMirror theme\n   * @param {boolean} [options.autofocus=true] - Whether to autofocus the editor\n   */\n  constructor(container, options = {}) {\n    super(container, options);\n    this.cm = null;\n    this.init();\n  }\n\n  /**\n   * Initializes the CodeMirror editor instance\n   * @throws {Error} If CodeMirror is not loaded\n   */\n  init() {\n    if (typeof CodeMirror === 'undefined') {\n      throw new Error('CodeMirror is not loaded. Include CodeMirror before using this adapter.');\n    }\n\n    const textarea = document.createElement('textarea');\n    this.container.appendChild(textarea);\n\n    this.cm = CodeMirror.fromTextArea(textarea, {\n      mode: this.options.mode || 'javascript',\n      theme: this.options.theme || 'darcula',\n      lineNumbers: true,\n      lineWrapping: true,\n      indentUnit: 2,\n      tabSize: 2,\n      indentWithTabs: false,\n      autofocus: this.options.autofocus !== false,\n      extraKeys: {\n        'Ctrl-Enter': () => this.triggerExecute(),\n        'Cmd-Enter': () => this.triggerExecute()\n      }\n    });\n\n    this.cm.on('change', () => {\n      this.triggerChange();\n    });\n  }\n\n  /**\n   * Gets the current code value from CodeMirror\n   * @returns {string} The current code\n   */\n  getValue() {\n    return this.cm.getValue();\n  }\n\n  /**\n   * Sets the code value in CodeMirror\n   * @param {string} code - The code to set\n   */\n  setValue(code) {\n    this.cm.setValue(code);\n  }\n\n  /**\n   * Focuses the CodeMirror editor\n   */\n  focus() {\n    this.cm.focus();\n  }\n\n  /**\n   * Cleans up the CodeMirror editor by converting back to textarea\n   */\n  destroy() {\n    if (this.cm) {\n      this.cm.toTextArea();\n    }\n  }\n}"],"names":["EditorAdapter","constructor","container","options","this","changeHandlers","executeHandlers","getValue","Error","setValue","code","onChange","callback","push","onExecute","focus","triggerChange","forEach","handler","triggerExecute","destroy","CodeMirrorEditor","super","cm","init","CodeMirror","textarea","document","createElement","appendChild","fromTextArea","mode","theme","lineNumbers","lineWrapping","indentUnit","tabSize","indentWithTabs","autofocus","extraKeys","on","toTextArea"],"mappings":"AAIO,MAAMA,EAMX,WAAAC,CAAYC,EAAWC,EAAU,IAC/BC,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EACfC,KAAKC,eAAiB,GACtBD,KAAKE,gBAAkB,EACzB,CAOA,QAAAC,GACE,MAAM,IAAIC,MAAM,mDAClB,CAOA,QAAAC,CAASC,GACP,MAAM,IAAIF,MAAM,mDAClB,CAMA,QAAAG,CAASC,GACPR,KAAKC,eAAeQ,KAAKD,EAC3B,CAMA,SAAAE,CAAUF,GACRR,KAAKE,gBAAgBO,KAAKD,EAC5B,CAMA,KAAAG,GACE,MAAM,IAAIP,MAAM,gDAClB,CAKA,aAAAQ,GACEZ,KAAKC,eAAeY,QAAQC,GAAWA,EAAQd,KAAKG,YACtD,CAKA,cAAAY,GACEf,KAAKE,gBAAgBW,QAAQC,GAAWA,IAC1C,CAMA,OAAAE,GAEA,ECzEK,MAAMC,UAAyBrB,EASpC,WAAAC,CAAYC,EAAWC,EAAU,IAC/BmB,MAAMpB,EAAWC,GACjBC,KAAKmB,GAAK,KACVnB,KAAKoB,MACP,CAMA,IAAAA,GACE,GAA0B,oBAAfC,WACT,MAAM,IAAIjB,MAAM,2EAGlB,MAAMkB,EAAWC,SAASC,cAAc,YACxCxB,KAAKF,UAAU2B,YAAYH,GAE3BtB,KAAKmB,GAAKE,WAAWK,aAAaJ,EAAU,CAC1CK,KAAM3B,KAAKD,QAAQ4B,MAAQ,aAC3BC,MAAO5B,KAAKD,QAAQ6B,OAAS,UAC7BC,aAAa,EACbC,cAAc,EACdC,WAAY,EACZC,QAAS,EACTC,gBAAgB,EAChBC,WAAsC,IAA3BlC,KAAKD,QAAQmC,UACxBC,UAAW,CACT,aAAc,IAAMnC,KAAKe,iBACzB,YAAa,IAAMf,KAAKe,oBAI5Bf,KAAKmB,GAAGiB,GAAG,SAAU,KACnBpC,KAAKY,iBAET,CAMA,QAAAT,GACE,OAAOH,KAAKmB,GAAGhB,UACjB,CAMA,QAAAE,CAASC,GACPN,KAAKmB,GAAGd,SAASC,EACnB,CAKA,KAAAK,GACEX,KAAKmB,GAAGR,OACV,CAKA,OAAAK,GACMhB,KAAKmB,IACPnB,KAAKmB,GAAGkB,YAEZ"}