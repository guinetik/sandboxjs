{"version":3,"file":"vendor-CVLeJax-.js","sources":["../../src/core/constants.js","../../src/core/logger.js","../../src/editors/base.js","../../src/editors/autocomplete/advanced.js","../../src/editors/input.js","../../src/editors/codemirror.js","../../src/editors/autocomplete/setup.js"],"sourcesContent":["/**\n * Application-wide constants\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\n\n// Execution timeouts\nexport const DEFAULT_TIMEOUT_MS = 4000;\nexport const NETWORK_TIMEOUT_MS = 5000;\nexport const TEMPLATE_LOAD_TIMEOUT_MS = 5000;\n\n// UI dimensions\nexport const MIN_LEFT_PANE_WIDTH = 320;\nexport const MIN_RIGHT_PANE_WIDTH = 420;\nexport const MIN_CONSOLE_HEIGHT = 100;\nexport const MIN_PREVIEW_HEIGHT = 100;\nexport const RESIZE_HANDLE_WIDTH = 5;\nexport const VERTICAL_RESIZE_HANDLE_HEIGHT = 8;\n\n// Storage keys\nexport const DEFAULT_STORAGE_KEY = 'js-sandbox-code';\n\n// Log levels\nexport const LOG_LEVELS = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n  TRACE: 4\n};\n\n// Default log level\nexport const DEFAULT_LOG_LEVEL = 'info';\n\n// Mobile breakpoint\nexport const MOBILE_BREAKPOINT = 768;\n\n/**\n * Gets the base path from the current document base or defaults to root\n * @returns {string} The base path (e.g., '/sandboxjs/' or '/')\n */\nfunction getBasePath() {\n  // Check if there's a base tag\n  const baseTag = document.querySelector('base');\n  if (baseTag && baseTag.href) {\n    const url = new URL(baseTag.href);\n    return url.pathname;\n  }\n  \n  // Fallback: detect from current path\n  const path = window.location.pathname;\n  // If path includes /sandboxjs/, use that as base\n  if (path.includes('/sandboxjs/')) {\n    return '/sandboxjs/';\n  }\n  \n  return '/';\n}\n\n// Examples path - dynamically determined based on base path\nexport const DEFAULT_EXAMPLES_PATH = getBasePath() + 'examples';\n\n// Environment-based template path resolution\nexport const DEFAULT_TEMPLATE_PATH = (() => {\n  // Check if we're in development mode (Vite sets this)\n  const isDevelopment = import.meta.env.DEV;\n\n  if (isDevelopment) {\n    // Development: load from src\n    return './src/ui/sandbox.html';\n  } else {\n    // Production: load from assets\n    return './assets/sandbox.html';\n  }\n})();\n\n// Event names\nexport const EVENTS = {\n  // Initialization\n  INIT_START: 'init:start',\n  INIT_COMPLETE: 'init:complete',\n  INIT_ERROR: 'init:error',\n  \n  // Code events\n  CODE_CHANGE: 'code:change',\n  CODE_LOAD: 'code:load',\n  CODE_VALIDATE: 'code:validate',\n  CODE_EXECUTE_START: 'code:execute:start',\n  CODE_EXECUTE_COMPLETE: 'code:execute:complete',\n  CODE_EXECUTE_TIMEOUT: 'code:execute:timeout',\n  \n  // Console events\n  CONSOLE_MESSAGE: 'console:message',\n  CONSOLE_CLEAR: 'console:clear',\n  \n  // Sandbox events\n  SANDBOX_RESET: 'sandbox:reset',\n  \n  // Status events\n  STATUS_CHANGE: 'status:change',\n\n  // Theme events\n  THEME_LOAD_START: 'theme:load:start',\n  THEME_LOAD_COMPLETE: 'theme:load:complete',\n  THEME_CHANGE: 'theme:change',\n  THEME_READY: 'theme:ready',\n  \n  // Editor events\n  EDITOR_READY: 'editor:ready',\n  \n  // Example events\n  EXAMPLE_LOAD: 'example:load',\n  EXAMPLE_LOADED: 'example:loaded',\n  EXAMPLE_ERROR: 'example:error',\n  \n  // Pane events\n  PANES_RESIZED: 'panes:resized',\n  PANES_RESIZED_VERTICAL: 'panes:resized:vertical',\n\n  // Fullscreen events\n  FULLSCREEN_TOGGLE: 'fullscreen:toggle',\n  FULLSCREEN_EDITOR: 'fullscreen:editor',\n  FULLSCREEN_CONSOLE: 'fullscreen:console',\n  FULLSCREEN_EXIT: 'fullscreen:exit',\n\n  // Library events\n  LIBRARY_MANAGER_OPEN: 'library:manager:open',\n  LIBRARY_ADD: 'library:add',\n  LIBRARY_ADDED: 'library:added',\n  LIBRARY_REMOVE: 'library:remove',\n  LIBRARY_REMOVED: 'library:removed',\n  DOMAIN_TRUST_REQUEST: 'domain:trust:request',\n  DOMAIN_ADDED: 'domain:added',\n  DOMAIN_REMOVED: 'domain:removed',\n  LIBRARIES_CLEARED: 'libraries:cleared',\n\n  // Destroy\n  DESTROY: 'destroy'\n};\n\n// Status messages\nexport const STATUS_MESSAGES = {\n  executing: 'Executing…',\n  completed: 'Completed',\n  timeout: 'Timeout exceeded',\n  reset: 'Sandbox reset',\n  cleared: 'Console cleared'\n};\n\n// Security\nexport const CRYPTO_ARRAY_SIZE = 2;\n\n// Template markers\nexport const TEMPLATE_MARKERS = {\n  SECRET: '{{SECRET}}',\n  USER_CODE: '{{USER_CODE}}',\n  DYNAMIC_CSP: '{{DYNAMIC_CSP}}',\n  LIBRARY_SCRIPTS: '{{LIBRARY_SCRIPTS}}'\n};\n","import { LOG_LEVELS, DEFAULT_LOG_LEVEL } from './constants.js';\n\n/**\n * Global logging filter manager for enabling/disabling specific components\n */\nclass LoggingManager {\n  constructor() {\n    this.allowedComponents = new Set();\n    this.globalEnabled = true;\n    this.allowAll = false;\n\n    // Try to load from localStorage\n    this.loadFromStorage();\n  }\n\n  /**\n   * Enables logging for specific components\n   * @param {...string} components - Component names to enable\n   */\n  enable(...components) {\n    components.forEach(comp => this.allowedComponents.add(comp.toLowerCase()));\n    this.saveToStorage();\n    console.log('🔧 Logging enabled for:', components.join(', '));\n  }\n\n  /**\n   * Disables logging for specific components\n   * @param {...string} components - Component names to disable\n   */\n  disable(...components) {\n    components.forEach(comp => this.allowedComponents.delete(comp.toLowerCase()));\n    this.saveToStorage();\n    console.log('🔧 Logging disabled for:', components.join(', '));\n  }\n\n  /**\n   * Enables logging for all components\n   */\n  enableAll() {\n    this.allowAll = true;\n    this.saveToStorage();\n    console.log('🔧 Logging enabled for ALL components');\n  }\n\n  /**\n   * Disables logging for all components except errors\n   */\n  disableAll() {\n    this.allowAll = false;\n    this.allowedComponents.clear();\n    this.saveToStorage();\n    console.log('🔧 Logging disabled for ALL components (errors still show)');\n  }\n\n  /**\n   * Shows current logging status\n   */\n  status() {\n    console.log('🔧 Logging Status:');\n    console.log('  Global enabled:', this.globalEnabled);\n    console.log('  Allow all:', this.allowAll);\n    console.log('  Enabled components:', Array.from(this.allowedComponents).join(', ') || 'none');\n  }\n\n  /**\n   * Lists available components that have loggers\n   */\n  listComponents() {\n    console.log('🔧 Available components to filter:');\n    const components = Array.from(this.registeredComponents || []).sort();\n    components.forEach(comp => {\n      const enabled = this.isComponentEnabled(comp);\n      console.log(`  ${enabled ? '✅' : '❌'} ${comp}`);\n    });\n  }\n\n  /**\n   * Checks if a component should log\n   * @param {string} component - Component name\n   * @returns {boolean} True if component should log\n   */\n  isComponentEnabled(component) {\n    if (!this.globalEnabled) return false;\n    if (this.allowAll) return true;\n    return this.allowedComponents.has(component.toLowerCase());\n  }\n\n  /**\n   * Registers a component for tracking\n   * @param {string} component - Component name\n   */\n  registerComponent(component) {\n    if (!this.registeredComponents) this.registeredComponents = new Set();\n    this.registeredComponents.add(component);\n  }\n\n  /**\n   * Saves filter state to localStorage\n   */\n  saveToStorage() {\n    try {\n      const state = {\n        allowedComponents: Array.from(this.allowedComponents),\n        allowAll: this.allowAll,\n        globalEnabled: this.globalEnabled\n      };\n      localStorage.setItem('sandbox_logging_filters', JSON.stringify(state));\n    } catch (e) {\n      // Ignore localStorage errors\n    }\n  }\n\n  /**\n   * Loads filter state from localStorage\n   */\n  loadFromStorage() {\n    try {\n      const state = JSON.parse(localStorage.getItem('sandbox_logging_filters') || '{}');\n      this.allowedComponents = new Set(state.allowedComponents || []);\n      this.allowAll = state.allowAll || false;\n      this.globalEnabled = state.globalEnabled !== false;\n\n      // If no saved state exists, set up sensible defaults for theme work\n      if (!localStorage.getItem('sandbox_logging_filters')) {\n        this.allowedComponents = new Set(['themeswitcher', 'codemirroreditor', 'editoradapter']);\n      }\n    } catch (e) {\n      // Ignore localStorage errors, use defaults\n      this.allowedComponents = new Set(['themeswitcher', 'codemirroreditor', 'editoradapter']);\n    }\n  }\n}\n\n// Global instance\nconst loggingManager = new LoggingManager();\n\n// Expose to window for easy console access\nif (typeof window !== 'undefined') {\n  window.logFilter = {\n    enable: (...components) => loggingManager.enable(...components),\n    disable: (...components) => loggingManager.disable(...components),\n    enableAll: () => loggingManager.enableAll(),\n    disableAll: () => loggingManager.disableAll(),\n    status: () => loggingManager.status(),\n    list: () => loggingManager.listComponents()\n  };\n}\n\n/**\n * Configurable logging interface with level-based filtering and prefixes\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance\n   * @param {Object} options - Logger configuration options\n   * @param {boolean} [options.enabled=true] - Whether logging is enabled\n   * @param {string} [options.level='info'] - Log level (error, warn, info, debug, trace)\n   * @param {string} [options.prefix=''] - Prefix to add to all log messages\n   * @param {boolean} [options.redactSecrets=false] - Whether to redact potential secrets\n   */\n  constructor(options = {}) {\n    this.enabled = options.enabled !== false;\n    this.level = options.level || DEFAULT_LOG_LEVEL;\n    this.prefix = options.prefix || '';\n    this.component = this.prefix; // Use prefix as component name for filtering\n    this.redactSecrets = options.redactSecrets || false;\n    this.currentLevel = LOG_LEVELS[this.level.toUpperCase()] ?? LOG_LEVELS.INFO;\n\n    // Register this component with the global manager\n    if (this.component) {\n      loggingManager.registerComponent(this.component);\n    }\n  }\n\n  /**\n   * Checks if a message should be logged based on current level, enabled state, and component filter\n   * @param {string} level - The log level to check\n   * @returns {boolean} True if the message should be logged\n   */\n  shouldLog(level) {\n    // Always allow errors to pass through\n    if (level.toUpperCase() === 'ERROR') {\n      return this.enabled && LOG_LEVELS[level.toUpperCase()] <= this.currentLevel;\n    }\n\n    // Check if this component is allowed to log\n    const componentAllowed = !this.component || loggingManager.isComponentEnabled(this.component);\n\n    return this.enabled &&\n           componentAllowed &&\n           LOG_LEVELS[level.toUpperCase()] <= this.currentLevel;\n  }\n\n  /**\n   * Redacts potential secrets from arguments\n   * @param {Array} args - Arguments to redact\n   * @returns {Array} Redacted arguments\n   */\n  redactArgs(args) {\n    if (!this.redactSecrets) return args;\n    \n    return args.map(arg => {\n      if (typeof arg === 'string') {\n        // Redact anything that looks like a token/secret (alphanumeric strings > 20 chars)\n        return arg.replace(/\\b[a-zA-Z0-9]{20,}\\b/g, '[REDACTED]');\n      }\n      return arg;\n    });\n  }\n\n  /**\n   * Formats a message with prefix\n   * @param {string} message - The message to format\n   * @param {...any} args - Additional arguments\n   * @returns {Array} Formatted message array\n   */\n  formatMessage(message, ...args) {\n    const prefix = this.prefix ? `[${this.prefix}] ` : '';\n    const redactedArgs = this.redactArgs(args);\n    return [prefix + message, ...redactedArgs];\n  }\n\n  /**\n   * Logs an error message\n   * @param {string} message - The error message\n   * @param {...any} args - Additional arguments\n   */\n  error(message, ...args) {\n    if (this.shouldLog('error')) {\n      console.error(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a warning message\n   * @param {string} message - The warning message\n   * @param {...any} args - Additional arguments\n   */\n  warn(message, ...args) {\n    if (this.shouldLog('warn')) {\n      console.warn(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs an info message\n   * @param {string} message - The info message\n   * @param {...any} args - Additional arguments\n   */\n  info(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.info(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a general message\n   * @param {string} message - The message\n   * @param {...any} args - Additional arguments\n   */\n  log(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.log(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a debug message\n   * @param {string} message - The debug message\n   * @param {...any} args - Additional arguments\n   */\n  debug(message, ...args) {\n    if (this.shouldLog('debug')) {\n      console.debug(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a trace message (with secret redaction by default)\n   * @param {string} message - The trace message\n   * @param {...any} args - Additional arguments\n   */\n  trace(message, ...args) {\n    if (this.shouldLog('trace')) {\n      // Always redact for trace logs to avoid leaking secrets\n      const wasRedacting = this.redactSecrets;\n      this.redactSecrets = true;\n      console.trace(...this.formatMessage(message, ...args));\n      this.redactSecrets = wasRedacting;\n    }\n  }\n\n  /**\n   * Logs a table of data\n   * @param {any} data - The data to display in table format\n   * @param {Array} [columns] - Optional column names\n   */\n  table(data, columns) {\n    if (this.shouldLog('info')) {\n      const prefix = this.prefix ? `[${this.prefix}]` : '';\n      if (prefix) console.log(prefix);\n      console.table(data, columns);\n    }\n  }\n\n  /**\n   * Creates a new group in the console\n   * @param {string} label - The group label\n   */\n  group(label) {\n    if (this.shouldLog('info')) {\n      console.group(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Creates a new collapsed group in the console\n   * @param {string} label - The group label\n   */\n  groupCollapsed(label) {\n    if (this.shouldLog('info')) {\n      console.groupCollapsed(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Ends the current console group\n   */\n  groupEnd() {\n    if (this.shouldLog('info')) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Starts a timer with the given label\n   * @param {string} label - The timer label\n   */\n  time(label) {\n    if (this.shouldLog('debug')) {\n      console.time(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Ends a timer with the given label\n   * @param {string} label - The timer label\n   */\n  timeEnd(label) {\n    if (this.shouldLog('debug')) {\n      console.timeEnd(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Sets the log level\n   * @param {string} level - The new log level\n   */\n  setLevel(level) {\n    this.level = level;\n    this.currentLevel = LOG_LEVELS[level.toUpperCase()] ?? LOG_LEVELS.INFO;\n  }\n\n  /**\n   * Enables logging\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * Disables logging\n   */\n  disable() {\n    this.enabled = false;\n  }\n\n  /**\n   * Checks if logging is enabled\n   * @returns {boolean} True if logging is enabled\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n}\n","import { Logger } from '../core/logger.js';\nimport { EVENTS } from '../core/constants.js';\n\n/**\n * Base class for editor adapters providing a common interface\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EditorAdapter {\n  /**\n   * Creates a new EditorAdapter instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   * @param {Object} [eventEmitter] - Event emitter for listening to global events\n   */\n  constructor(container, options = {}, eventEmitter = null) {\n    this.container = container;\n    this.options = options;\n    this.eventEmitter = eventEmitter;\n    this.changeHandlers = [];\n    this.executeHandlers = [];\n    this.inputHandlers = [];\n    this.deleteHandlers = [];\n\n    this.logger = new Logger({\n      enabled: true,\n      level: 'info',\n      prefix: 'EditorAdapter'\n    });\n\n    // Listen for theme events if event emitter is provided\n    if (this.eventEmitter) {\n      this.logger.info('Setting up theme event listeners');\n\n      // Listen for theme ready (initial theme load)\n      this.eventEmitter.on(EVENTS.THEME_READY, (data) => {\n        this.logger.info('Base adapter received theme ready event:', data);\n        this.onThemeChange(data.theme, null);\n      });\n\n      // Listen for theme changes (user switching themes)\n      this.eventEmitter.on(EVENTS.THEME_CHANGE, (data) => {\n        this.logger.info('Base adapter received theme change event:', data);\n        this.onThemeChange(data.theme, data.oldTheme);\n      });\n    } else {\n      this.logger.warn('No event emitter provided - theme switching will not work');\n    }\n  }\n\n  /**\n   * Gets the current code value from the editor\n   * @returns {string} The current code\n   * @throws {Error} Must be implemented by subclass\n   */\n  getValue() {\n    throw new Error('getValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Sets the code value in the editor\n   * @param {string} code - The code to set\n   * @throws {Error} Must be implemented by subclass\n   */\n  setValue(code) {\n    throw new Error('setValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Registers a callback for code change events\n   * @param {Function} callback - Callback function to call when code changes\n   */\n  onChange(callback) {\n    this.changeHandlers.push(callback);\n  }\n\n  /**\n   * Registers a callback for code execution events (Ctrl+Enter)\n   * @param {Function} callback - Callback function to call when user executes code\n   */\n  onExecute(callback) {\n    this.executeHandlers.push(callback);\n  }\n\n  /**\n   * Registers a callback for input events (character typed)\n   * @param {Function} callback - Callback function to call when user types\n   */\n  onInput(callback) {\n    this.inputHandlers.push(callback);\n  }\n\n  /**\n   * Registers a callback for delete events (backspace/delete)\n   * @param {Function} callback - Callback function to call when user deletes\n   */\n  onDelete(callback) {\n    this.deleteHandlers.push(callback);\n  }\n\n  /**\n   * Focuses the editor\n   * @throws {Error} Must be implemented by subclass\n   */\n  focus() {\n    throw new Error('focus() must be implemented by editor adapter');\n  }\n\n  /**\n   * Triggers all registered change handlers\n   */\n  triggerChange() {\n    this.changeHandlers.forEach(handler => handler(this.getValue()));\n  }\n\n  /**\n   * Triggers all registered execute handlers\n   */\n  triggerExecute() {\n    this.executeHandlers.forEach(handler => handler());\n  }\n\n  /**\n   * Triggers all registered input handlers\n   * @param {Object} inputData - Input event data\n   */\n  triggerInput(inputData) {\n    this.inputHandlers.forEach(handler => handler(inputData));\n  }\n\n  /**\n   * Triggers all registered delete handlers\n   * @param {Object} deleteData - Delete event data\n   */\n  triggerDelete(deleteData) {\n    this.deleteHandlers.forEach(handler => handler(deleteData));\n  }\n\n  /**\n   * Applies a transformation to the editor (insert text, move cursor, etc.)\n   * @param {Object} transformation - Transformation to apply\n   */\n  applyTransformation(transformation) {\n    // Override in subclasses to implement transformations\n    throw new Error('applyTransformation() must be implemented by editor adapter');\n  }\n\n  /**\n   * Called when theme changes - override in subclasses\n   * @param {string} newTheme - The new theme name\n   * @param {string} oldTheme - The previous theme name\n   */\n  onThemeChange(newTheme, oldTheme) {\n    // Override in subclasses to implement theme switching\n  }\n\n  /**\n   * Cleans up the editor instance\n   * Override if cleanup is needed\n   */\n  destroy() {\n    // Override if cleanup needed\n  }\n}","/**\n * Advanced Autocomplete Features\n * \n * This file demonstrates how to enhance the basic autocomplete\n * with more Chrome DevTools-like features\n */\n\nimport { Logger } from \"../../core/logger\";\n\nexport class AdvancedAutocomplete {\n  constructor(cm, options = {}) {\n    this.cm = cm;\n    this.options = options;\n    this.logger = new Logger({\n      enabled: options.debug || false,\n      prefix: 'AdvancedAutocomplete'\n    });\n    \n    // Track variables in scope\n    this.scopeVariables = new Map();\n    \n    // Track imported libraries from CDN\n    this.loadedLibraries = new Map();\n    \n    // Initialize scope tracking\n    this.initScopeTracking();\n  }\n\n  /**\n   * Initialize scope tracking by analyzing code\n   */\n  initScopeTracking() {\n    this.cm.on('change', () => {\n      this.analyzeScopeVariables();\n    });\n    \n    // Initial analysis\n    this.analyzeScopeVariables();\n  }\n\n  /**\n   * Analyze code to extract variable declarations\n   */\n  analyzeScopeVariables() {\n    const code = this.cm.getValue();\n    \n    // Simple regex patterns for variable detection\n    const patterns = {\n      // const/let/var declarations\n      variables: /(?:const|let|var)\\s+(\\w+)/g,\n      // function declarations\n      functions: /function\\s+(\\w+)/g,\n      // class declarations\n      classes: /class\\s+(\\w+)/g,\n      // arrow functions assigned to variables\n      arrowFunctions: /(?:const|let|var)\\s+(\\w+)\\s*=\\s*(?:\\([^)]*\\)|[^=])\\s*=>/g\n    };\n    \n    this.scopeVariables.clear();\n    \n    // Extract all declarations\n    Object.entries(patterns).forEach(([type, pattern]) => {\n      let match;\n      while ((match = pattern.exec(code)) !== null) {\n        const name = match[1];\n        if (name) {\n          this.scopeVariables.set(name, {\n            type: type,\n            line: this.getLineNumber(code, match.index),\n            value: this.extractValue(code, match.index)\n          });\n        }\n      }\n    });\n    \n    this.logger.info('Scope analysis complete:', this.scopeVariables.size, 'variables found');\n  }\n\n  /**\n   * Get line number from character index\n   */\n  getLineNumber(text, index) {\n    return text.substring(0, index).split('\\n').length - 1;\n  }\n\n  /**\n   * Extract the value or type of a variable\n   */\n  extractValue(code, startIndex) {\n    // Simple extraction - could be enhanced\n    const snippet = code.substring(startIndex, startIndex + 100);\n    const match = snippet.match(/=\\s*([^;,\\n]+)/);\n    return match ? match[1].trim() : null;\n  }\n\n  /**\n   * Enhanced hint provider with scope awareness\n   */\n  provideHints(cm, options) {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n    const line = cm.getLine(cursor.line);\n    const start = token.start;\n    const end = cursor.ch;\n    \n    let suggestions = [];\n    \n    // Add scope variables\n    if (!line.substring(0, start).endsWith('.')) {\n      this.scopeVariables.forEach((info, name) => {\n        if (name.toLowerCase().startsWith(token.string.toLowerCase())) {\n          suggestions.push({\n            text: name,\n            displayText: name,\n            type: info.type,\n            className: 'scope-variable',\n            hint: () => cm.replaceRange(name, {line: cursor.line, ch: start}, cursor)\n          });\n        }\n      });\n    }\n    \n    // Add property suggestions for known objects\n    if (line.substring(0, start).endsWith('.')) {\n      const objMatch = line.substring(0, start - 1).match(/(\\w+)$/);\n      if (objMatch) {\n        const objName = objMatch[1];\n        const objInfo = this.scopeVariables.get(objName);\n        \n        if (objInfo && objInfo.value) {\n          // Provide intelligent suggestions based on value\n          suggestions = this.getPropertySuggestions(objInfo.value);\n        }\n      }\n    }\n    \n    return {\n      list: suggestions,\n      from: CodeMirror.Pos(cursor.line, start),\n      to: CodeMirror.Pos(cursor.line, end)\n    };\n  }\n\n  /**\n   * Get property suggestions based on object type\n   */\n  getPropertySuggestions(value) {\n    const suggestions = [];\n    \n    // Detect array literals\n    if (value.startsWith('[')) {\n      return ['length', 'push', 'pop', 'map', 'filter', 'reduce', 'forEach'].map(method => ({\n        text: method,\n        displayText: method + '()',\n        className: 'array-method'\n      }));\n    }\n    \n    // Detect object literals\n    if (value.startsWith('{')) {\n      // Could parse the object to get actual properties\n      return ['hasOwnProperty', 'toString', 'valueOf'].map(method => ({\n        text: method,\n        displayText: method + '()',\n        className: 'object-method'\n      }));\n    }\n    \n    // Detect string literals\n    if (value.startsWith('\"') || value.startsWith(\"'\") || value.startsWith('`')) {\n      return ['length', 'charAt', 'split', 'substring', 'replace'].map(method => ({\n        text: method,\n        displayText: method + (method === 'length' ? '' : '()'),\n        className: 'string-method'\n      }));\n    }\n    \n    return suggestions;\n  }\n}\n\n/**\n * Type inference system for better autocomplete\n */\nexport class TypeInference {\n  constructor() {\n    this.typeMap = new Map();\n  }\n\n  /**\n   * Infer type from value\n   */\n  inferType(value) {\n    if (!value) return 'any';\n    \n    // String literals\n    if (/^[\"'`]/.test(value)) return 'string';\n    \n    // Number literals\n    if (/^\\d+(\\.\\d+)?$/.test(value)) return 'number';\n    \n    // Boolean literals\n    if (/^(true|false)$/.test(value)) return 'boolean';\n    \n    // Array literals\n    if (/^\\[/.test(value)) return 'array';\n    \n    // Object literals\n    if (/^\\{/.test(value)) return 'object';\n    \n    // Function expressions\n    if (/^function/.test(value) || /^=>/.test(value)) return 'function';\n    \n    // Constructor calls\n    if (/^new\\s+(\\w+)/.test(value)) {\n      const match = value.match(/^new\\s+(\\w+)/);\n      return match[1].toLowerCase();\n    }\n    \n    return 'any';\n  }\n}\n\n/**\n * Documentation provider for hover hints\n */\nexport class DocumentationProvider {\n  constructor() {\n    this.docs = {\n      'console.log': {\n        signature: 'console.log(...data: any[]): void',\n        description: 'Outputs a message to the console',\n        example: 'console.log(\"Hello\", \"World\");'\n      },\n      'Array.prototype.map': {\n        signature: 'map<U>(callbackfn: (value: T, index: number, array: T[]) => U): U[]',\n        description: 'Creates a new array with the results of calling a provided function on every element',\n        example: '[1, 2, 3].map(x => x * 2); // [2, 4, 6]'\n      },\n      // Add more documentation entries\n    };\n  }\n\n  /**\n   * Get documentation for a symbol\n   */\n  getDocumentation(symbol) {\n    return this.docs[symbol] || null;\n  }\n}\n\n// CSS for advanced autocomplete features\nexport const advancedStyles = `\n  /* Scope variables */\n  .CodeMirror-hint.scope-variable {\n    padding-left: 20px;\n    position: relative;\n  }\n  \n  .CodeMirror-hint.scope-variable:before {\n    content: \"📦\";\n    position: absolute;\n    left: 4px;\n  }\n  \n  /* Type indicators */\n  .CodeMirror-hint.string-method:before {\n    content: \"📝\";\n  }\n  \n  .CodeMirror-hint.array-method:before {\n    content: \"📋\";\n  }\n  \n  .CodeMirror-hint.object-method:before {\n    content: \"📦\";\n  }\n  \n  /* Documentation popup */\n  .cm-documentation-popup {\n    position: absolute;\n    background: rgba(30, 30, 30, 0.95);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 4px;\n    padding: 8px 12px;\n    font-size: 12px;\n    max-width: 400px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(10px);\n  }\n  \n  .cm-documentation-popup .signature {\n    color: #61afef;\n    font-family: monospace;\n    margin-bottom: 4px;\n  }\n  \n  .cm-documentation-popup .description {\n    color: #abb2bf;\n    margin-bottom: 4px;\n  }\n  \n  .cm-documentation-popup .example {\n    color: #98c379;\n    font-family: monospace;\n    background: rgba(0, 0, 0, 0.3);\n    padding: 4px;\n    border-radius: 2px;\n  }\n`;\n","import { Logger } from '../core/logger.js';\n\n/**\n * Universal Input Manager - Handles input transformations for all editor types\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class InputManager {\n  /**\n   * Creates a new InputManager instance\n   * @param {Object} options - Configuration options\n   * @param {boolean} [options.debug=false] - Enable debug logging\n   */\n  constructor(options = {}) {\n    this.options = {\n      debug: false,\n      ...options\n    };\n\n    this.logger = new Logger({\n      enabled: this.options.debug,\n      level: 'info',\n      prefix: 'InputManager'\n    });\n\n    // Bracket pairs for auto-closing\n    this.bracketPairs = new Map([\n      ['(', ')'],\n      ['[', ']'],\n      ['{', '}'],\n      ['\"', '\"'],\n      [\"'\", \"'\"],\n      ['`', '`']\n    ]);\n\n    this.logger.info('InputManager initialized');\n  }\n\n  /**\n   * Handle character input and return transformation if needed\n   * @param {Object} inputData - Input event data\n   * @param {string} inputData.char - Character that was typed\n   * @param {number} inputData.position - Cursor position\n   * @param {string} inputData.line - Current line content\n   * @param {number} inputData.lineNumber - Line number\n   * @returns {Object|null} Transformation object or null if no transformation\n   */\n  handleInput(inputData) {\n    const { char, position, line } = inputData;\n\n    this.logger.debug(`Handling input: \"${char}\" at position ${position}`);\n\n    // Handle opening brackets/quotes\n    if (this.bracketPairs.has(char)) {\n      const closeChar = this.bracketPairs.get(char);\n\n      if (this.shouldAutoClose(inputData, closeChar)) {\n        this.logger.debug(`Auto-closing ${char} with ${closeChar}`);\n        return {\n          action: 'insert',\n          text: closeChar,\n          cursorOffset: -1 // Move cursor back to be between brackets\n        };\n      }\n    }\n\n    // Handle closing brackets - skip if already there\n    if (Array.from(this.bracketPairs.values()).includes(char)) {\n      const charAfter = line.charAt(position);\n      if (charAfter === char) {\n        this.logger.debug(`Skipping over existing ${char}`);\n        return {\n          action: 'skip',\n          positions: 1 // Move cursor forward 1 position\n        };\n      }\n    }\n\n    return null; // No transformation needed\n  }\n\n  /**\n   * Handle delete operations (backspace/delete)\n   * @param {Object} deleteData - Delete event data\n   * @param {string} deleteData.type - 'backspace' or 'delete'\n   * @param {number} deleteData.position - Cursor position\n   * @param {string} deleteData.line - Current line content\n   * @returns {Object|null} Transformation object or null if no transformation\n   */\n  handleDelete(deleteData) {\n    const { type, position, line } = deleteData;\n\n    if (type === 'backspace') {\n      const charBefore = line.charAt(position - 1);\n      const charAfter = line.charAt(position);\n\n      // Check for empty bracket pairs\n      for (const [open, close] of this.bracketPairs) {\n        if (charBefore === open && charAfter === close) {\n          this.logger.debug(`Deleting empty bracket pair: ${open}${close}`);\n          return {\n            action: 'deleteRange',\n            start: position - 1,\n            end: position + 1\n          };\n        }\n      }\n    }\n\n    return null; // No transformation needed\n  }\n\n  /**\n   * Determine if a bracket should be auto-closed\n   * @param {Object} inputData - Input event data\n   * @param {string} closeChar - The closing character to potentially insert\n   * @returns {boolean} Whether to auto-close\n   */\n  shouldAutoClose(inputData, closeChar) {\n    const { char, position, line } = inputData;\n\n    const charAfter = line.charAt(position);\n    const charBefore = line.charAt(position - 1);\n\n    // For quotes, don't auto-close if we're inside a word\n    if (['\"', \"'\", '`'].includes(char)) {\n      if (/\\w/.test(charBefore) && /\\w/.test(charAfter)) {\n        return false;\n      }\n\n      // If next char is the same quote, we'll skip it instead\n      if (charAfter === char) {\n        return false; // Let the skip logic handle this\n      }\n    }\n\n    // Auto-close if:\n    // - End of line\n    // - Next char is whitespace\n    // - Next char is punctuation/closing bracket\n    return !charAfter ||\n           /\\s/.test(charAfter) ||\n           [')', ']', '}', ',', ';', '.'].includes(charAfter);\n  }\n\n  /**\n   * Get debug information about current bracket state\n   * @param {string} line - Current line\n   * @param {number} position - Cursor position\n   * @returns {Object} Debug info\n   */\n  getDebugInfo(line, position) {\n    return {\n      charBefore: line.charAt(position - 1) || 'none',\n      charAfter: line.charAt(position) || 'none',\n      position,\n      lineLength: line.length,\n      nearContext: line.substring(Math.max(0, position - 3), position + 3)\n    };\n  }\n}","import { EditorAdapter } from './base.js';\nimport { Logger } from '../core/logger.js';\nimport { setupAutocomplete, autocompleteStyles } from './autocomplete/setup.js';\nimport { AdvancedAutocomplete } from './autocomplete/advanced.js';\nimport { InputManager } from './input.js';\n\n/**\n * CodeMirror editor adapter with syntax highlighting and advanced features\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class CodeMirrorEditor extends EditorAdapter {\n  /**\n   * Creates a new CodeMirrorEditor instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   * @param {string} [options.mode='javascript'] - CodeMirror language mode\n   * @param {string} [options.theme='darcula'] - CodeMirror theme\n   * @param {boolean} [options.autofocus=true] - Whether to autofocus the editor\n   * @param {Object} [eventEmitter] - Event emitter for listening to global events\n   */\n  constructor(container, options = {}, eventEmitter = null) {\n    super(container, options, eventEmitter);\n    this.cm = null;\n    this.currentTheme = options.theme || 'darcula';\n\n    this.logger = new Logger({\n      enabled: true,\n      level: 'info',\n      prefix: 'CodeMirrorEditor'\n    });\n\n    // Initialize InputManager\n    this.inputManager = new InputManager({\n      debug: options.debug || false\n    });\n\n    this.logger.info('CodeMirror editor initialized with theme:', this.currentTheme);\n    this.logger.info('Event emitter provided:', !!eventEmitter);\n\n    this.init();\n    this.setupInputHandling();\n  }\n\n  /**\n   * Initializes the CodeMirror editor instance\n   * @throws {Error} If CodeMirror is not loaded\n   */\n  init() {\n    if (typeof CodeMirror === 'undefined') {\n      throw new Error('CodeMirror is not loaded. Include CodeMirror before using this adapter.');\n    }\n\n    const textarea = document.createElement('textarea');\n    this.container.appendChild(textarea);\n\n    this.cm = CodeMirror.fromTextArea(textarea, {\n      mode: this.options.mode || 'javascript',\n      theme: this.currentTheme,\n      lineNumbers: true,\n      lineWrapping: true,\n      indentUnit: 2,\n      tabSize: 2,\n      indentWithTabs: false,\n      autofocus: this.options.autofocus !== false,\n      extraKeys: {\n        'Ctrl-Enter': () => this.triggerExecute(),\n        'Cmd-Enter': () => this.triggerExecute()\n      }\n    });\n\n    this.cm.on('change', () => {\n      this.triggerChange();\n    });\n\n    // Setup autocomplete if enabled\n    if (this.options.autocomplete !== false) {\n      this.setupAutocomplete();\n    }\n\n    // Apply glass effect on initial load\n    this.applyGlassEffect(this.currentTheme);\n  }\n\n  /**\n   * Gets the current code value from CodeMirror\n   * @returns {string} The current code\n   */\n  getValue() {\n    return this.cm.getValue();\n  }\n\n  /**\n   * Sets the code value in CodeMirror\n   * @param {string} code - The code to set\n   */\n  setValue(code) {\n    this.cm.setValue(code);\n  }\n\n  /**\n   * Focuses the CodeMirror editor\n   */\n  focus() {\n    this.cm.focus();\n  }\n\n  /**\n   * Handles theme change events\n   * @param {string} newTheme - The new theme name\n   * @param {string} oldTheme - The previous theme name\n   */\n  onThemeChange(newTheme, oldTheme) {\n    this.logger.info('onThemeChange called with:', { newTheme, oldTheme });\n    this.logger.info('Current theme before change:', this.currentTheme);\n    this.logger.info('CodeMirror instance exists:', !!this.cm);\n\n    if (this.cm && newTheme !== this.currentTheme) {\n      this.logger.info('Applying theme change from', this.currentTheme, 'to', newTheme);\n      this.currentTheme = newTheme;\n      this.cm.setOption('theme', newTheme);\n      this.logger.info('Theme applied successfully. CodeMirror theme is now:', this.cm.getOption('theme'));\n\n      // Apply glass glow effect by reducing background opacity\n      this.applyGlassEffect(newTheme);\n    } else {\n      this.logger.warn('Theme change skipped. Reasons:');\n      this.logger.warn('- CodeMirror exists:', !!this.cm);\n      this.logger.warn('- New theme different from current:', newTheme !== this.currentTheme);\n      this.logger.warn('- New theme value:', newTheme);\n      this.logger.warn('- Current theme value:', this.currentTheme);\n    }\n  }\n\n  /**\n   * Applies glass effect by reducing CodeMirror background opacity\n   * @param {string} theme - The current theme name\n   */\n  applyGlassEffect(theme) {\n    // Wait for theme to be applied, then modify background opacity\n    setTimeout(() => {\n      const cmElement = this.container.querySelector('.CodeMirror');\n      if (cmElement) {\n        this.logger.info('Applying glass effect for theme:', theme);\n\n        // Get the computed background color from the theme\n        const computedStyle = window.getComputedStyle(cmElement);\n        const backgroundColor = computedStyle.backgroundColor;\n        this.logger.info('Original background color:', backgroundColor);\n\n        // Parse the color and reduce opacity to 70% (not 50% - too transparent)\n        const reducedOpacityColor = this.reduceColorOpacity(backgroundColor, 0.7);\n        this.logger.info('Reduced opacity color:', reducedOpacityColor);\n\n        // Create or update style element for glass effect\n        let styleElement = document.getElementById('codemirror-glass-effect');\n        if (!styleElement) {\n          styleElement = document.createElement('style');\n          styleElement.id = 'codemirror-glass-effect';\n          document.head.appendChild(styleElement);\n        }\n\n        // Apply reduced opacity background to let glow show through\n        const themeClass = `.cm-s-${theme}`;\n        styleElement.textContent = `\n          ${themeClass}.CodeMirror {\n            background-color: ${reducedOpacityColor} !important;\n          }\n          ${themeClass} .CodeMirror-gutters {\n            background-color: ${this.reduceColorOpacity(backgroundColor, 0.8)} !important;\n          }\n        `;\n\n        this.logger.info('Glass effect applied with reduced opacity background');\n      }\n    }, 200); // Slightly longer delay to ensure theme CSS is fully loaded\n  }\n\n  /**\n   * Reduces the opacity of a CSS color value\n   * @param {string} color - The CSS color value (rgb, rgba, hex, etc.)\n   * @param {number} opacity - The target opacity (0-1)\n   * @returns {string} The color with reduced opacity in rgba format\n   */\n  reduceColorOpacity(color, opacity) {\n    // Handle rgba format\n    const rgbaMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*([\\d.]+))?\\)/);\n    if (rgbaMatch) {\n      const [, r, g, b] = rgbaMatch;\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Handle rgb format\n    const rgbMatch = color.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (rgbMatch) {\n      const [, r, g, b] = rgbMatch;\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Handle hex format\n    const hexMatch = color.match(/^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n    if (hexMatch) {\n      const r = parseInt(hexMatch[1], 16);\n      const g = parseInt(hexMatch[2], 16);\n      const b = parseInt(hexMatch[3], 16);\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Fallback for other formats or if parsing fails\n    this.logger.warn('Could not parse color:', color, 'using fallback');\n    return `rgba(0, 0, 0, ${opacity})`;\n  }\n\n  /**\n   * Gets the current theme\n   * @returns {string} Current theme name\n   */\n  getCurrentTheme() {\n    return this.currentTheme;\n  }\n\n  /**\n   * Sets the theme programmatically\n   * @param {string} theme - Theme name to set\n   */\n  setTheme(theme) {\n    if (this.cm && theme !== this.currentTheme) {\n      this.currentTheme = theme;\n      this.cm.setOption('theme', theme);\n    }\n  }\n\n  /**\n   * Sets up autocomplete functionality\n   */\n  setupAutocomplete() {\n    this.logger.info('Setting up autocomplete');\n\n    // Inject autocomplete styles\n    if (!document.getElementById('codemirror-autocomplete-styles')) {\n      const styleElement = document.createElement('style');\n      styleElement.id = 'codemirror-autocomplete-styles';\n      styleElement.textContent = autocompleteStyles;\n      document.head.appendChild(styleElement);\n    }\n\n    // Setup autocomplete functionality\n    const autocompleteSetup = setupAutocomplete(this.cm, {\n      autoComplete: true\n    });\n\n    this.advancedAutocomplete = new AdvancedAutocomplete(this.cm, {\n      debug: this.options.debug\n    });\n\n    // Connect the two systems so setup can access scope variables\n    if (autocompleteSetup && autocompleteSetup.setAdvancedInstance) {\n      autocompleteSetup.setAdvancedInstance(this.advancedAutocomplete);\n    }\n\n    this.logger.info('Autocomplete setup complete');\n  }\n\n  /**\n   * Set up input handling with InputManager\n   */\n  setupInputHandling() {\n    this.logger.info('Setting up input handling');\n\n    // Listen for input events from CodeMirror\n    this.cm.on('inputRead', (cm, change) => {\n      if (change.text.length === 1 && change.text[0]) {\n        const char = change.text[0];\n        const cursor = cm.getCursor();\n        const line = cm.getLine(cursor.line);\n\n        const inputData = {\n          char,\n          position: cursor.ch - 1, // Position before the character was inserted\n          line: line.substring(0, cursor.ch - 1) + line.substring(cursor.ch), // Line before insertion\n          lineNumber: cursor.line\n        };\n\n        this.logger.debug('Input event:', inputData);\n\n        // Get transformation from InputManager\n        const transformation = this.inputManager.handleInput(inputData);\n        if (transformation) {\n          this.applyTransformation(transformation);\n        }\n\n        // Trigger the adapter event for external listeners\n        this.triggerInput(inputData);\n      }\n    });\n\n    // Listen for delete operations\n    this.cm.on('beforeChange', (cm, change) => {\n      if (change.origin === '+delete' || change.origin === 'delete') {\n        const cursor = cm.getCursor();\n        const line = cm.getLine(cursor.line);\n\n        const deleteData = {\n          type: 'backspace', // or 'delete' depending on the operation\n          position: cursor.ch,\n          line,\n          lineNumber: cursor.line\n        };\n\n        this.logger.debug('Delete event:', deleteData);\n\n        // Get transformation from InputManager\n        const transformation = this.inputManager.handleDelete(deleteData);\n        if (transformation) {\n          // We need to apply this in the next tick to avoid conflicts\n          setTimeout(() => this.applyTransformation(transformation), 0);\n        }\n\n        // Trigger the adapter event for external listeners\n        this.triggerDelete(deleteData);\n      }\n    });\n\n    this.logger.info('Input handling setup complete');\n  }\n\n  /**\n   * Apply a transformation to the CodeMirror editor\n   * @param {Object} transformation - Transformation to apply\n   */\n  applyTransformation(transformation) {\n    this.logger.debug('Applying transformation:', transformation);\n\n    const cursor = this.cm.getCursor();\n\n    switch (transformation.action) {\n      case 'insert':\n        this.cm.replaceSelection(transformation.text);\n        if (transformation.cursorOffset !== undefined) {\n          const newCursor = this.cm.getCursor();\n          this.cm.setCursor(newCursor.line, newCursor.ch + transformation.cursorOffset);\n        }\n        break;\n\n      case 'skip':\n        this.cm.setCursor(cursor.line, cursor.ch + transformation.positions);\n        break;\n\n      case 'deleteRange':\n        this.cm.replaceRange('',\n          { line: cursor.line, ch: transformation.start },\n          { line: cursor.line, ch: transformation.end }\n        );\n        break;\n\n      default:\n        this.logger.warn('Unknown transformation action:', transformation.action);\n    }\n  }\n\n\n  /**\n   * Cleans up the CodeMirror editor by converting back to textarea\n   */\n  destroy() {\n    if (this.cm) {\n      this.cm.toTextArea();\n    }\n  }\n}","/**\n * Autocomplete setup for CodeMirror\n * Provides intelligent code completion for JavaScript\n */\n\nexport function setupAutocomplete(cm, options = {}) {\n  // Store reference to advanced autocomplete instance for scope access\n  let advancedAutocomplete = null;\n  // JavaScript keywords\n  const jsKeywords = [\n    'async', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue',\n    'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'finally',\n    'for', 'function', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'return',\n    'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while',\n    'with', 'yield', 'true', 'false', 'null', 'undefined'\n  ];\n\n  // Browser globals\n  const browserGlobals = [\n    'document', 'window', 'console', 'navigator', 'location', 'history',\n    'localStorage', 'sessionStorage', 'fetch', 'Promise', 'Array', 'Object',\n    'String', 'Number', 'Boolean', 'Date', 'RegExp', 'Math', 'JSON',\n    'setTimeout', 'setInterval', 'clearTimeout', 'clearInterval',\n    'requestAnimationFrame', 'cancelAnimationFrame'\n  ];\n\n\n  /**\n   * Runtime introspection - discover methods from actual browser objects\n   */\n  function getObjectMethods(obj, prototype = null) {\n    if (!obj) return [];\n\n    const methods = new Set();\n\n    // Get methods from the object instance\n    Object.getOwnPropertyNames(obj).forEach(name => {\n      try {\n        if (typeof obj[name] === 'function' && !name.startsWith('_')) {\n          methods.add(name);\n        }\n      } catch (e) {\n        // Some properties might throw when accessed\n      }\n    });\n\n    // Get methods from prototype if provided\n    if (prototype) {\n      Object.getOwnPropertyNames(prototype).forEach(name => {\n        try {\n          if (typeof prototype[name] === 'function' &&\n              name !== 'constructor' && !name.startsWith('_')) {\n            methods.add(name);\n          }\n        } catch (e) {\n          // Some properties might throw when accessed\n        }\n      });\n    }\n\n    // Also walk up the prototype chain for more methods\n    let currentProto = prototype || Object.getPrototypeOf(obj);\n    while (currentProto && currentProto !== Object.prototype) {\n      try {\n        Object.getOwnPropertyNames(currentProto).forEach(name => {\n          try {\n            if (typeof currentProto[name] === 'function' &&\n                name !== 'constructor' && !name.startsWith('_')) {\n              methods.add(name);\n            }\n          } catch (e) {\n            // Some properties might throw when accessed\n          }\n        });\n        currentProto = Object.getPrototypeOf(currentProto);\n      } catch (e) {\n        break;\n      }\n    }\n\n    return Array.from(methods).sort();\n  }\n\n  // Get methods from actual browser objects\n  const consoleMethods = getObjectMethods(console);\n  const windowMethods = getObjectMethods(window, Window.prototype);\n  const documentMethods = getObjectMethods(document, Document.prototype);\n  const arrayMethods = getObjectMethods([], Array.prototype);\n  const stringMethods = getObjectMethods('', String.prototype);\n  const mathMethods = getObjectMethods(Math);\n\n  // Debug: Verify runtime introspection worked\n  console.log('🔍 Autocomplete setup complete:');\n  console.log('  - Window methods:', windowMethods.length);\n  console.log('  - Document methods:', documentMethods.length);\n  console.log('  - Console methods:', consoleMethods.length);\n\n  // Cache commonly used object methods for performance\n  const methodCache = {\n    console: consoleMethods,\n    window: windowMethods,\n    document: documentMethods,\n    Array: arrayMethods,\n    String: stringMethods,\n    Math: mathMethods,\n    // Add more as needed\n    localStorage: getObjectMethods(localStorage, Storage.prototype),\n    sessionStorage: getObjectMethods(sessionStorage, Storage.prototype),\n    navigator: getObjectMethods(navigator, Navigator.prototype),\n    location: getObjectMethods(location, Location.prototype)\n  };\n\n  // Custom hint function\n  function javascriptHint(cm, options) {\n    const cursor = cm.getCursor();\n    const token = cm.getTokenAt(cursor);\n    const start = token.start;\n    const end = cursor.ch;\n    const line = cursor.line;\n    const currentWord = token.string;\n\n    // Get the full line up to cursor position\n    const fullTextToCursor = cm.getLine(line).substring(0, end);\n\n    let suggestions = [];\n\n    // Check if we're after a dot (property access)\n    // Look for pattern: object.partial_method where cursor is after the partial method\n    const dotMatch = fullTextToCursor.match(/(\\w+)\\.(\\w*)$/);\n\n    if (dotMatch) {\n      const objectName = dotMatch[1];\n      const partialMethod = dotMatch[2] || '';\n\n      console.log(`🔍 Object access: ${objectName}.${partialMethod}`);\n\n      // Provide context-specific completions using runtime introspection\n      if (methodCache[objectName]) {\n        let allMethods = methodCache[objectName];\n        console.log(`🔍 Found ${allMethods.length} methods for ${objectName}`);\n\n        // Filter methods based on what user has typed after the dot\n        if (partialMethod) {\n          suggestions = allMethods.filter(method =>\n            method.toLowerCase().startsWith(partialMethod.toLowerCase())\n          );\n          console.log(`🔍 Filtered to ${suggestions.length} methods for \"${partialMethod}\":`, suggestions.slice(0, 5));\n        } else {\n          suggestions = allMethods;\n        }\n      } else if (objectName === 'Array') {\n        suggestions = methodCache.Array;\n      } else if (objectName === 'String' || textBefore.match(/[\"'].*[\"']\\.$/)) {\n        suggestions = methodCache.String;\n      } else {\n        // Try to introspect the object dynamically\n        try {\n          const globalObj = window[objectName];\n          if (globalObj) {\n            suggestions = getObjectMethods(globalObj, globalObj.constructor?.prototype);\n          } else {\n            // Fallback to generic object methods\n            suggestions = getObjectMethods({}, Object.prototype);\n          }\n        } catch (e) {\n          // Fallback to basic object methods\n          suggestions = ['toString', 'valueOf', 'hasOwnProperty', 'constructor'];\n        }\n      }\n    } else {\n      // Not after a dot - suggest globals, keywords, and user variables\n      const allSuggestions = [...jsKeywords, ...browserGlobals];\n\n      // Add user-defined variables from scope analysis\n      if (advancedAutocomplete && advancedAutocomplete.scopeVariables) {\n        const userVariables = Array.from(advancedAutocomplete.scopeVariables.keys());\n        allSuggestions.push(...userVariables);\n      }\n\n      if (currentWord) {\n        suggestions = allSuggestions.filter(item =>\n          item.toLowerCase().startsWith(currentWord.toLowerCase())\n        );\n      } else {\n        suggestions = allSuggestions;\n      }\n    }\n\n    // Calculate the correct start position for replacement\n    let replaceStart = start;\n    let replaceEnd = end;\n\n    if (dotMatch) {\n      // For object.method completion, only replace the method part\n      const dotIndex = fullTextToCursor.lastIndexOf('.');\n      replaceStart = dotIndex + 1;\n    }\n\n    return {\n      list: suggestions.map(text => ({\n        text: text,\n        displayText: text,\n        className: 'autocomplete-item',\n        render: (element, self, data) => {\n          element.textContent = data.displayText;\n          if (jsKeywords.includes(data.text)) {\n            element.className += ' keyword';\n          } else if (browserGlobals.includes(data.text)) {\n            element.className += ' global';\n          } else if (advancedAutocomplete && advancedAutocomplete.scopeVariables &&\n                    advancedAutocomplete.scopeVariables.has(data.text)) {\n            element.className += ' user-variable';\n          } else {\n            element.className += ' method';\n          }\n        }\n      })),\n      from: CodeMirror.Pos(line, replaceStart),\n      to: CodeMirror.Pos(line, replaceEnd)\n    };\n  }\n\n  // Register the hint function\n  CodeMirror.registerHelper('hint', 'javascript', javascriptHint);\n\n  // Configure autocomplete - clean and simple\n  const existingKeys = cm.getOption('extraKeys') || {};\n  cm.setOption('extraKeys', {\n    ...existingKeys,\n    'Ctrl-Space': 'autocomplete',\n    '.': function(cm) {\n      cm.replaceSelection('.');\n      // Trigger autocomplete immediately for object methods\n      cm.execCommand('autocomplete');\n    }\n  });\n\n  // Simple auto-trigger for word completion\n  cm.on('inputRead', function(cm, change) {\n    // Only trigger on word characters, not special chars\n    if (change.text[0] && /[a-zA-Z]/.test(change.text[0])) {\n      cm.execCommand('autocomplete');\n    }\n  });\n\n  // Return a function to set the advanced autocomplete instance\n  return {\n    setAdvancedInstance: (instance) => {\n      advancedAutocomplete = instance;\n    },\n    hint: javascriptHint\n  };\n}\n\n// CSS for autocomplete styling\nexport const autocompleteStyles = `\n  .CodeMirror-hints {\n    position: absolute;\n    z-index: 10;\n    overflow: hidden;\n    list-style: none;\n    margin: 0;\n    padding: 2px;\n    background: #1e1e1e;\n    border: 1px solid #444;\n    border-radius: 4px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    font-family: monospace;\n    font-size: 90%;\n    max-height: 20em;\n    overflow-y: auto;\n  }\n\n  .CodeMirror-hint {\n    margin: 0;\n    padding: 4px 8px;\n    border-radius: 2px;\n    white-space: pre;\n    cursor: pointer;\n  }\n\n  .CodeMirror-hint-active {\n    background: #2a2a2a;\n    color: #fff;\n  }\n\n  .autocomplete-item {\n    display: flex;\n    align-items: center;\n  }\n\n  .autocomplete-item.keyword {\n    color: #c678dd;\n  }\n\n  .autocomplete-item.global {\n    color: #61afef;\n  }\n\n  .autocomplete-item.method {\n    color: #e06c75;\n  }\n\n  .autocomplete-item.user-variable {\n    color: #ffffff;\n    font-weight: 500;\n  }\n\n  /* Integrate with your neon glow theme */\n  .CodeMirror-hints {\n    backdrop-filter: blur(10px);\n    background: rgba(30, 30, 30, 0.9);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n`;\n"],"names":["DEFAULT_TIMEOUT_MS","NETWORK_TIMEOUT_MS","TEMPLATE_LOAD_TIMEOUT_MS","MIN_LEFT_PANE_WIDTH","MIN_RIGHT_PANE_WIDTH","MIN_CONSOLE_HEIGHT","MIN_PREVIEW_HEIGHT","RESIZE_HANDLE_WIDTH","DEFAULT_STORAGE_KEY","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","TRACE","MOBILE_BREAKPOINT","DEFAULT_EXAMPLES_PATH","baseTag","document","querySelector","href","URL","pathname","window","location","includes","getBasePath","DEFAULT_TEMPLATE_PATH","EVENTS","INIT_START","INIT_COMPLETE","INIT_ERROR","CODE_CHANGE","CODE_LOAD","CODE_VALIDATE","CODE_EXECUTE_START","CODE_EXECUTE_COMPLETE","CODE_EXECUTE_TIMEOUT","CONSOLE_MESSAGE","CONSOLE_CLEAR","SANDBOX_RESET","STATUS_CHANGE","THEME_LOAD_START","THEME_LOAD_COMPLETE","THEME_CHANGE","THEME_READY","EDITOR_READY","EXAMPLE_LOAD","EXAMPLE_LOADED","EXAMPLE_ERROR","PANES_RESIZED","PANES_RESIZED_VERTICAL","FULLSCREEN_TOGGLE","FULLSCREEN_EDITOR","FULLSCREEN_CONSOLE","FULLSCREEN_EXIT","LIBRARY_MANAGER_OPEN","LIBRARY_ADD","LIBRARY_ADDED","LIBRARY_REMOVE","LIBRARY_REMOVED","DOMAIN_TRUST_REQUEST","DOMAIN_ADDED","DOMAIN_REMOVED","LIBRARIES_CLEARED","DESTROY","STATUS_MESSAGES","executing","completed","timeout","reset","cleared","CRYPTO_ARRAY_SIZE","TEMPLATE_MARKERS","SECRET","USER_CODE","DYNAMIC_CSP","LIBRARY_SCRIPTS","loggingManager","constructor","this","allowedComponents","Set","globalEnabled","allowAll","loadFromStorage","enable","components","forEach","add","comp","toLowerCase","saveToStorage","console","log","join","disable","delete","enableAll","disableAll","clear","status","Array","from","listComponents","registeredComponents","sort","enabled","isComponentEnabled","component","has","registerComponent","state","localStorage","setItem","JSON","stringify","e","parse","getItem","logFilter","list","Logger","options","level","prefix","redactSecrets","currentLevel","toUpperCase","shouldLog","componentAllowed","redactArgs","args","map","arg","replace","formatMessage","message","error","warn","info","debug","trace","wasRedacting","table","data","columns","group","label","groupCollapsed","groupEnd","time","timeEnd","setLevel","isEnabled","EditorAdapter","container","eventEmitter","changeHandlers","executeHandlers","inputHandlers","deleteHandlers","logger","on","onThemeChange","theme","oldTheme","getValue","Error","setValue","code","onChange","callback","push","onExecute","onInput","onDelete","focus","triggerChange","handler","triggerExecute","triggerInput","inputData","triggerDelete","deleteData","applyTransformation","transformation","newTheme","destroy","AdvancedAutocomplete","cm","scopeVariables","Map","loadedLibraries","initScopeTracking","analyzeScopeVariables","Object","entries","variables","functions","classes","arrowFunctions","type","pattern","match","exec","name","set","line","getLineNumber","index","value","extractValue","size","text","substring","split","length","startIndex","trim","provideHints","cursor","getCursor","token","getTokenAt","getLine","start","end","ch","suggestions","endsWith","startsWith","string","displayText","className","hint","replaceRange","objMatch","objName","objInfo","get","getPropertySuggestions","CodeMirror","Pos","to","method","InputManager","bracketPairs","handleInput","char","position","closeChar","shouldAutoClose","action","cursorOffset","values","charAt","positions","handleDelete","charBefore","charAfter","open","close","test","getDebugInfo","lineLength","nearContext","Math","max","CodeMirrorEditor","super","currentTheme","inputManager","init","setupInputHandling","textarea","createElement","appendChild","fromTextArea","mode","lineNumbers","lineWrapping","indentUnit","tabSize","indentWithTabs","autofocus","extraKeys","autocomplete","setupAutocomplete","applyGlassEffect","setOption","getOption","setTimeout","cmElement","backgroundColor","getComputedStyle","reducedOpacityColor","reduceColorOpacity","styleElement","getElementById","id","head","themeClass","textContent","color","opacity","rgbaMatch","r","g","b","rgbMatch","hexMatch","parseInt","getCurrentTheme","setTheme","autocompleteSetup","advancedAutocomplete","jsKeywords","browserGlobals","getObjectMethods","obj","prototype","methods","getOwnPropertyNames","currentProto","getPrototypeOf","consoleMethods","windowMethods","Window","documentMethods","Document","arrayMethods","stringMethods","String","mathMethods","methodCache","Storage","sessionStorage","navigator","Navigator","Location","javascriptHint","currentWord","fullTextToCursor","dotMatch","objectName","partialMethod","allMethods","filter","slice","textBefore","globalObj","allSuggestions","userVariables","keys","item","replaceStart","replaceEnd","lastIndexOf","render","element","self","registerHelper","existingKeys","replaceSelection","execCommand","change","setAdvancedInstance","instance","lineNumber","origin","newCursor","setCursor","toTextArea"],"mappings":"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"}