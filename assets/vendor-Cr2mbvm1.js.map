{"version":3,"file":"vendor-Cr2mbvm1.js","sources":["../../src/core/constants.js","../../src/core/logger.js","../../src/editors/base.js","../../src/editors/codemirror.js"],"sourcesContent":["/**\n * Application-wide constants\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\n\n// Execution timeouts\nexport const DEFAULT_TIMEOUT_MS = 4000;\nexport const NETWORK_TIMEOUT_MS = 5000;\nexport const TEMPLATE_LOAD_TIMEOUT_MS = 5000;\n\n// UI dimensions\nexport const MIN_LEFT_PANE_WIDTH = 320;\nexport const MIN_RIGHT_PANE_WIDTH = 420;\nexport const MIN_CONSOLE_HEIGHT = 100;\nexport const MIN_PREVIEW_HEIGHT = 100;\nexport const RESIZE_HANDLE_WIDTH = 5;\nexport const VERTICAL_RESIZE_HANDLE_HEIGHT = 8;\n\n// Storage keys\nexport const DEFAULT_STORAGE_KEY = 'js-sandbox-code';\n\n// Log levels\nexport const LOG_LEVELS = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n  TRACE: 4\n};\n\n// Default log level\nexport const DEFAULT_LOG_LEVEL = 'info';\n\n// Mobile breakpoint\nexport const MOBILE_BREAKPOINT = 768;\n\n/**\n * Gets the base path from the current document base or defaults to root\n * @returns {string} The base path (e.g., '/sandboxjs/' or '/')\n */\nfunction getBasePath() {\n  // Check if there's a base tag\n  const baseTag = document.querySelector('base');\n  if (baseTag && baseTag.href) {\n    const url = new URL(baseTag.href);\n    return url.pathname;\n  }\n  \n  // Fallback: detect from current path\n  const path = window.location.pathname;\n  // If path includes /sandboxjs/, use that as base\n  if (path.includes('/sandboxjs/')) {\n    return '/sandboxjs/';\n  }\n  \n  return '/';\n}\n\n// Examples path - dynamically determined based on base path\nexport const DEFAULT_EXAMPLES_PATH = getBasePath() + 'examples';\n\n// Template path - relative path works in both dev and production\nexport const DEFAULT_TEMPLATE_PATH = './src/ui/sandbox.html';\n\n// Event names\nexport const EVENTS = {\n  // Initialization\n  INIT_START: 'init:start',\n  INIT_COMPLETE: 'init:complete',\n  INIT_ERROR: 'init:error',\n  \n  // Code events\n  CODE_CHANGE: 'code:change',\n  CODE_LOAD: 'code:load',\n  CODE_VALIDATE: 'code:validate',\n  CODE_EXECUTE_START: 'code:execute:start',\n  CODE_EXECUTE_COMPLETE: 'code:execute:complete',\n  CODE_EXECUTE_TIMEOUT: 'code:execute:timeout',\n  \n  // Console events\n  CONSOLE_MESSAGE: 'console:message',\n  CONSOLE_CLEAR: 'console:clear',\n  \n  // Sandbox events\n  SANDBOX_RESET: 'sandbox:reset',\n  \n  // Status events\n  STATUS_CHANGE: 'status:change',\n\n  // Theme events\n  THEME_LOAD_START: 'theme:load:start',\n  THEME_LOAD_COMPLETE: 'theme:load:complete',\n  THEME_CHANGE: 'theme:change',\n  THEME_READY: 'theme:ready',\n  \n  // Editor events\n  EDITOR_READY: 'editor:ready',\n  \n  // Example events\n  EXAMPLE_LOAD: 'example:load',\n  EXAMPLE_LOADED: 'example:loaded',\n  EXAMPLE_ERROR: 'example:error',\n  \n  // Pane events\n  PANES_RESIZED: 'panes:resized',\n  PANES_RESIZED_VERTICAL: 'panes:resized:vertical',\n  \n  // Destroy\n  DESTROY: 'destroy'\n};\n\n// Status messages\nexport const STATUS_MESSAGES = {\n  executing: 'Executing…',\n  completed: 'Completed',\n  timeout: 'Timeout exceeded',\n  reset: 'Sandbox reset',\n  cleared: 'Console cleared'\n};\n\n// Security\nexport const CRYPTO_ARRAY_SIZE = 2;\n\n// Template markers\nexport const TEMPLATE_MARKERS = {\n  SECRET: '{{SECRET}}',\n  USER_CODE: '{{USER_CODE}}'\n};\n","import { LOG_LEVELS, DEFAULT_LOG_LEVEL } from './constants.js';\n\n/**\n * Global logging filter manager for enabling/disabling specific components\n */\nclass LoggingManager {\n  constructor() {\n    this.allowedComponents = new Set();\n    this.globalEnabled = true;\n    this.allowAll = false;\n\n    // Try to load from localStorage\n    this.loadFromStorage();\n  }\n\n  /**\n   * Enables logging for specific components\n   * @param {...string} components - Component names to enable\n   */\n  enable(...components) {\n    components.forEach(comp => this.allowedComponents.add(comp.toLowerCase()));\n    this.saveToStorage();\n    console.log('🔧 Logging enabled for:', components.join(', '));\n  }\n\n  /**\n   * Disables logging for specific components\n   * @param {...string} components - Component names to disable\n   */\n  disable(...components) {\n    components.forEach(comp => this.allowedComponents.delete(comp.toLowerCase()));\n    this.saveToStorage();\n    console.log('🔧 Logging disabled for:', components.join(', '));\n  }\n\n  /**\n   * Enables logging for all components\n   */\n  enableAll() {\n    this.allowAll = true;\n    this.saveToStorage();\n    console.log('🔧 Logging enabled for ALL components');\n  }\n\n  /**\n   * Disables logging for all components except errors\n   */\n  disableAll() {\n    this.allowAll = false;\n    this.allowedComponents.clear();\n    this.saveToStorage();\n    console.log('🔧 Logging disabled for ALL components (errors still show)');\n  }\n\n  /**\n   * Shows current logging status\n   */\n  status() {\n    console.log('🔧 Logging Status:');\n    console.log('  Global enabled:', this.globalEnabled);\n    console.log('  Allow all:', this.allowAll);\n    console.log('  Enabled components:', Array.from(this.allowedComponents).join(', ') || 'none');\n  }\n\n  /**\n   * Lists available components that have loggers\n   */\n  listComponents() {\n    console.log('🔧 Available components to filter:');\n    const components = Array.from(this.registeredComponents || []).sort();\n    components.forEach(comp => {\n      const enabled = this.isComponentEnabled(comp);\n      console.log(`  ${enabled ? '✅' : '❌'} ${comp}`);\n    });\n  }\n\n  /**\n   * Checks if a component should log\n   * @param {string} component - Component name\n   * @returns {boolean} True if component should log\n   */\n  isComponentEnabled(component) {\n    if (!this.globalEnabled) return false;\n    if (this.allowAll) return true;\n    return this.allowedComponents.has(component.toLowerCase());\n  }\n\n  /**\n   * Registers a component for tracking\n   * @param {string} component - Component name\n   */\n  registerComponent(component) {\n    if (!this.registeredComponents) this.registeredComponents = new Set();\n    this.registeredComponents.add(component);\n  }\n\n  /**\n   * Saves filter state to localStorage\n   */\n  saveToStorage() {\n    try {\n      const state = {\n        allowedComponents: Array.from(this.allowedComponents),\n        allowAll: this.allowAll,\n        globalEnabled: this.globalEnabled\n      };\n      localStorage.setItem('sandbox_logging_filters', JSON.stringify(state));\n    } catch (e) {\n      // Ignore localStorage errors\n    }\n  }\n\n  /**\n   * Loads filter state from localStorage\n   */\n  loadFromStorage() {\n    try {\n      const state = JSON.parse(localStorage.getItem('sandbox_logging_filters') || '{}');\n      this.allowedComponents = new Set(state.allowedComponents || []);\n      this.allowAll = state.allowAll || false;\n      this.globalEnabled = state.globalEnabled !== false;\n\n      // If no saved state exists, set up sensible defaults for theme work\n      if (!localStorage.getItem('sandbox_logging_filters')) {\n        this.allowedComponents = new Set(['themeswitcher', 'codemirroreditor', 'editoradapter']);\n      }\n    } catch (e) {\n      // Ignore localStorage errors, use defaults\n      this.allowedComponents = new Set(['themeswitcher', 'codemirroreditor', 'editoradapter']);\n    }\n  }\n}\n\n// Global instance\nconst loggingManager = new LoggingManager();\n\n// Expose to window for easy console access\nif (typeof window !== 'undefined') {\n  window.logFilter = {\n    enable: (...components) => loggingManager.enable(...components),\n    disable: (...components) => loggingManager.disable(...components),\n    enableAll: () => loggingManager.enableAll(),\n    disableAll: () => loggingManager.disableAll(),\n    status: () => loggingManager.status(),\n    list: () => loggingManager.listComponents()\n  };\n}\n\n/**\n * Configurable logging interface with level-based filtering and prefixes\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance\n   * @param {Object} options - Logger configuration options\n   * @param {boolean} [options.enabled=true] - Whether logging is enabled\n   * @param {string} [options.level='info'] - Log level (error, warn, info, debug, trace)\n   * @param {string} [options.prefix=''] - Prefix to add to all log messages\n   * @param {boolean} [options.redactSecrets=false] - Whether to redact potential secrets\n   */\n  constructor(options = {}) {\n    this.enabled = options.enabled !== false;\n    this.level = options.level || DEFAULT_LOG_LEVEL;\n    this.prefix = options.prefix || '';\n    this.component = this.prefix; // Use prefix as component name for filtering\n    this.redactSecrets = options.redactSecrets || false;\n    this.currentLevel = LOG_LEVELS[this.level.toUpperCase()] ?? LOG_LEVELS.INFO;\n\n    // Register this component with the global manager\n    if (this.component) {\n      loggingManager.registerComponent(this.component);\n    }\n  }\n\n  /**\n   * Checks if a message should be logged based on current level, enabled state, and component filter\n   * @param {string} level - The log level to check\n   * @returns {boolean} True if the message should be logged\n   */\n  shouldLog(level) {\n    // Always allow errors to pass through\n    if (level.toUpperCase() === 'ERROR') {\n      return this.enabled && LOG_LEVELS[level.toUpperCase()] <= this.currentLevel;\n    }\n\n    // Check if this component is allowed to log\n    const componentAllowed = !this.component || loggingManager.isComponentEnabled(this.component);\n\n    return this.enabled &&\n           componentAllowed &&\n           LOG_LEVELS[level.toUpperCase()] <= this.currentLevel;\n  }\n\n  /**\n   * Redacts potential secrets from arguments\n   * @param {Array} args - Arguments to redact\n   * @returns {Array} Redacted arguments\n   */\n  redactArgs(args) {\n    if (!this.redactSecrets) return args;\n    \n    return args.map(arg => {\n      if (typeof arg === 'string') {\n        // Redact anything that looks like a token/secret (alphanumeric strings > 20 chars)\n        return arg.replace(/\\b[a-zA-Z0-9]{20,}\\b/g, '[REDACTED]');\n      }\n      return arg;\n    });\n  }\n\n  /**\n   * Formats a message with prefix\n   * @param {string} message - The message to format\n   * @param {...any} args - Additional arguments\n   * @returns {Array} Formatted message array\n   */\n  formatMessage(message, ...args) {\n    const prefix = this.prefix ? `[${this.prefix}] ` : '';\n    const redactedArgs = this.redactArgs(args);\n    return [prefix + message, ...redactedArgs];\n  }\n\n  /**\n   * Logs an error message\n   * @param {string} message - The error message\n   * @param {...any} args - Additional arguments\n   */\n  error(message, ...args) {\n    if (this.shouldLog('error')) {\n      console.error(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a warning message\n   * @param {string} message - The warning message\n   * @param {...any} args - Additional arguments\n   */\n  warn(message, ...args) {\n    if (this.shouldLog('warn')) {\n      console.warn(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs an info message\n   * @param {string} message - The info message\n   * @param {...any} args - Additional arguments\n   */\n  info(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.info(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a general message\n   * @param {string} message - The message\n   * @param {...any} args - Additional arguments\n   */\n  log(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.log(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a debug message\n   * @param {string} message - The debug message\n   * @param {...any} args - Additional arguments\n   */\n  debug(message, ...args) {\n    if (this.shouldLog('debug')) {\n      console.debug(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a trace message (with secret redaction by default)\n   * @param {string} message - The trace message\n   * @param {...any} args - Additional arguments\n   */\n  trace(message, ...args) {\n    if (this.shouldLog('trace')) {\n      // Always redact for trace logs to avoid leaking secrets\n      const wasRedacting = this.redactSecrets;\n      this.redactSecrets = true;\n      console.trace(...this.formatMessage(message, ...args));\n      this.redactSecrets = wasRedacting;\n    }\n  }\n\n  /**\n   * Logs a table of data\n   * @param {any} data - The data to display in table format\n   * @param {Array} [columns] - Optional column names\n   */\n  table(data, columns) {\n    if (this.shouldLog('info')) {\n      const prefix = this.prefix ? `[${this.prefix}]` : '';\n      if (prefix) console.log(prefix);\n      console.table(data, columns);\n    }\n  }\n\n  /**\n   * Creates a new group in the console\n   * @param {string} label - The group label\n   */\n  group(label) {\n    if (this.shouldLog('info')) {\n      console.group(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Creates a new collapsed group in the console\n   * @param {string} label - The group label\n   */\n  groupCollapsed(label) {\n    if (this.shouldLog('info')) {\n      console.groupCollapsed(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Ends the current console group\n   */\n  groupEnd() {\n    if (this.shouldLog('info')) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Starts a timer with the given label\n   * @param {string} label - The timer label\n   */\n  time(label) {\n    if (this.shouldLog('debug')) {\n      console.time(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Ends a timer with the given label\n   * @param {string} label - The timer label\n   */\n  timeEnd(label) {\n    if (this.shouldLog('debug')) {\n      console.timeEnd(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Sets the log level\n   * @param {string} level - The new log level\n   */\n  setLevel(level) {\n    this.level = level;\n    this.currentLevel = LOG_LEVELS[level.toUpperCase()] ?? LOG_LEVELS.INFO;\n  }\n\n  /**\n   * Enables logging\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * Disables logging\n   */\n  disable() {\n    this.enabled = false;\n  }\n\n  /**\n   * Checks if logging is enabled\n   * @returns {boolean} True if logging is enabled\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n}\n","import { Logger } from '../core/logger.js';\nimport { EVENTS } from '../core/constants.js';\n\n/**\n * Base class for editor adapters providing a common interface\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EditorAdapter {\n  /**\n   * Creates a new EditorAdapter instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   * @param {Object} [eventEmitter] - Event emitter for listening to global events\n   */\n  constructor(container, options = {}, eventEmitter = null) {\n    this.container = container;\n    this.options = options;\n    this.eventEmitter = eventEmitter;\n    this.changeHandlers = [];\n    this.executeHandlers = [];\n\n    this.logger = new Logger({\n      enabled: true,\n      level: 'info',\n      prefix: 'EditorAdapter'\n    });\n\n    // Listen for theme events if event emitter is provided\n    if (this.eventEmitter) {\n      this.logger.info('Setting up theme event listeners');\n\n      // Listen for theme ready (initial theme load)\n      this.eventEmitter.on(EVENTS.THEME_READY, (data) => {\n        this.logger.info('Base adapter received theme ready event:', data);\n        this.onThemeChange(data.theme, null);\n      });\n\n      // Listen for theme changes (user switching themes)\n      this.eventEmitter.on(EVENTS.THEME_CHANGE, (data) => {\n        this.logger.info('Base adapter received theme change event:', data);\n        this.onThemeChange(data.theme, data.oldTheme);\n      });\n    } else {\n      this.logger.warn('No event emitter provided - theme switching will not work');\n    }\n  }\n\n  /**\n   * Gets the current code value from the editor\n   * @returns {string} The current code\n   * @throws {Error} Must be implemented by subclass\n   */\n  getValue() {\n    throw new Error('getValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Sets the code value in the editor\n   * @param {string} code - The code to set\n   * @throws {Error} Must be implemented by subclass\n   */\n  setValue(code) {\n    throw new Error('setValue() must be implemented by editor adapter');\n  }\n\n  /**\n   * Registers a callback for code change events\n   * @param {Function} callback - Callback function to call when code changes\n   */\n  onChange(callback) {\n    this.changeHandlers.push(callback);\n  }\n\n  /**\n   * Registers a callback for code execution events (Ctrl+Enter)\n   * @param {Function} callback - Callback function to call when user executes code\n   */\n  onExecute(callback) {\n    this.executeHandlers.push(callback);\n  }\n\n  /**\n   * Focuses the editor\n   * @throws {Error} Must be implemented by subclass\n   */\n  focus() {\n    throw new Error('focus() must be implemented by editor adapter');\n  }\n\n  /**\n   * Triggers all registered change handlers\n   */\n  triggerChange() {\n    this.changeHandlers.forEach(handler => handler(this.getValue()));\n  }\n\n  /**\n   * Triggers all registered execute handlers\n   */\n  triggerExecute() {\n    this.executeHandlers.forEach(handler => handler());\n  }\n\n  /**\n   * Called when theme changes - override in subclasses\n   * @param {string} newTheme - The new theme name\n   * @param {string} oldTheme - The previous theme name\n   */\n  onThemeChange(newTheme, oldTheme) {\n    // Override in subclasses to implement theme switching\n  }\n\n  /**\n   * Cleans up the editor instance\n   * Override if cleanup is needed\n   */\n  destroy() {\n    // Override if cleanup needed\n  }\n}","import { EditorAdapter } from './base.js';\nimport { Logger } from '../core/logger.js';\n\n/**\n * CodeMirror editor adapter with syntax highlighting and advanced features\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class CodeMirrorEditor extends EditorAdapter {\n  /**\n   * Creates a new CodeMirrorEditor instance\n   * @param {HTMLElement} container - DOM element to contain the editor\n   * @param {Object} [options={}] - Editor configuration options\n   * @param {string} [options.mode='javascript'] - CodeMirror language mode\n   * @param {string} [options.theme='darcula'] - CodeMirror theme\n   * @param {boolean} [options.autofocus=true] - Whether to autofocus the editor\n   * @param {Object} [eventEmitter] - Event emitter for listening to global events\n   */\n  constructor(container, options = {}, eventEmitter = null) {\n    super(container, options, eventEmitter);\n    this.cm = null;\n    this.currentTheme = options.theme || 'darcula';\n\n    this.logger = new Logger({\n      enabled: true,\n      level: 'info',\n      prefix: 'CodeMirrorEditor'\n    });\n\n    this.logger.info('CodeMirror editor initialized with theme:', this.currentTheme);\n    this.logger.info('Event emitter provided:', !!eventEmitter);\n\n    this.init();\n  }\n\n  /**\n   * Initializes the CodeMirror editor instance\n   * @throws {Error} If CodeMirror is not loaded\n   */\n  init() {\n    if (typeof CodeMirror === 'undefined') {\n      throw new Error('CodeMirror is not loaded. Include CodeMirror before using this adapter.');\n    }\n\n    const textarea = document.createElement('textarea');\n    this.container.appendChild(textarea);\n\n    this.cm = CodeMirror.fromTextArea(textarea, {\n      mode: this.options.mode || 'javascript',\n      theme: this.currentTheme,\n      lineNumbers: true,\n      lineWrapping: true,\n      indentUnit: 2,\n      tabSize: 2,\n      indentWithTabs: false,\n      autofocus: this.options.autofocus !== false,\n      extraKeys: {\n        'Ctrl-Enter': () => this.triggerExecute(),\n        'Cmd-Enter': () => this.triggerExecute()\n      }\n    });\n\n    this.cm.on('change', () => {\n      this.triggerChange();\n    });\n\n    // Apply glass effect on initial load\n    this.applyGlassEffect(this.currentTheme);\n  }\n\n  /**\n   * Gets the current code value from CodeMirror\n   * @returns {string} The current code\n   */\n  getValue() {\n    return this.cm.getValue();\n  }\n\n  /**\n   * Sets the code value in CodeMirror\n   * @param {string} code - The code to set\n   */\n  setValue(code) {\n    this.cm.setValue(code);\n  }\n\n  /**\n   * Focuses the CodeMirror editor\n   */\n  focus() {\n    this.cm.focus();\n  }\n\n  /**\n   * Handles theme change events\n   * @param {string} newTheme - The new theme name\n   * @param {string} oldTheme - The previous theme name\n   */\n  onThemeChange(newTheme, oldTheme) {\n    this.logger.info('onThemeChange called with:', { newTheme, oldTheme });\n    this.logger.info('Current theme before change:', this.currentTheme);\n    this.logger.info('CodeMirror instance exists:', !!this.cm);\n\n    if (this.cm && newTheme !== this.currentTheme) {\n      this.logger.info('Applying theme change from', this.currentTheme, 'to', newTheme);\n      this.currentTheme = newTheme;\n      this.cm.setOption('theme', newTheme);\n      this.logger.info('Theme applied successfully. CodeMirror theme is now:', this.cm.getOption('theme'));\n\n      // Apply glass glow effect by reducing background opacity\n      this.applyGlassEffect(newTheme);\n    } else {\n      this.logger.warn('Theme change skipped. Reasons:');\n      this.logger.warn('- CodeMirror exists:', !!this.cm);\n      this.logger.warn('- New theme different from current:', newTheme !== this.currentTheme);\n      this.logger.warn('- New theme value:', newTheme);\n      this.logger.warn('- Current theme value:', this.currentTheme);\n    }\n  }\n\n  /**\n   * Applies glass effect by reducing CodeMirror background opacity\n   * @param {string} theme - The current theme name\n   */\n  applyGlassEffect(theme) {\n    // Wait for theme to be applied, then modify background opacity\n    setTimeout(() => {\n      const cmElement = this.container.querySelector('.CodeMirror');\n      if (cmElement) {\n        this.logger.info('Applying glass effect for theme:', theme);\n\n        // Get the computed background color from the theme\n        const computedStyle = window.getComputedStyle(cmElement);\n        const backgroundColor = computedStyle.backgroundColor;\n        this.logger.info('Original background color:', backgroundColor);\n\n        // Parse the color and reduce opacity to 70% (not 50% - too transparent)\n        const reducedOpacityColor = this.reduceColorOpacity(backgroundColor, 0.7);\n        this.logger.info('Reduced opacity color:', reducedOpacityColor);\n\n        // Create or update style element for glass effect\n        let styleElement = document.getElementById('codemirror-glass-effect');\n        if (!styleElement) {\n          styleElement = document.createElement('style');\n          styleElement.id = 'codemirror-glass-effect';\n          document.head.appendChild(styleElement);\n        }\n\n        // Apply reduced opacity background to let glow show through\n        const themeClass = `.cm-s-${theme}`;\n        styleElement.textContent = `\n          ${themeClass}.CodeMirror {\n            background-color: ${reducedOpacityColor} !important;\n          }\n          ${themeClass} .CodeMirror-gutters {\n            background-color: ${this.reduceColorOpacity(backgroundColor, 0.8)} !important;\n          }\n        `;\n\n        this.logger.info('Glass effect applied with reduced opacity background');\n      }\n    }, 200); // Slightly longer delay to ensure theme CSS is fully loaded\n  }\n\n  /**\n   * Reduces the opacity of a CSS color value\n   * @param {string} color - The CSS color value (rgb, rgba, hex, etc.)\n   * @param {number} opacity - The target opacity (0-1)\n   * @returns {string} The color with reduced opacity in rgba format\n   */\n  reduceColorOpacity(color, opacity) {\n    // Handle rgba format\n    const rgbaMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*([\\d.]+))?\\)/);\n    if (rgbaMatch) {\n      const [, r, g, b] = rgbaMatch;\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Handle rgb format\n    const rgbMatch = color.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (rgbMatch) {\n      const [, r, g, b] = rgbMatch;\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Handle hex format\n    const hexMatch = color.match(/^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n    if (hexMatch) {\n      const r = parseInt(hexMatch[1], 16);\n      const g = parseInt(hexMatch[2], 16);\n      const b = parseInt(hexMatch[3], 16);\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Fallback for other formats or if parsing fails\n    this.logger.warn('Could not parse color:', color, 'using fallback');\n    return `rgba(0, 0, 0, ${opacity})`;\n  }\n\n  /**\n   * Gets the current theme\n   * @returns {string} Current theme name\n   */\n  getCurrentTheme() {\n    return this.currentTheme;\n  }\n\n  /**\n   * Sets the theme programmatically\n   * @param {string} theme - Theme name to set\n   */\n  setTheme(theme) {\n    if (this.cm && theme !== this.currentTheme) {\n      this.currentTheme = theme;\n      this.cm.setOption('theme', theme);\n    }\n  }\n\n  /**\n   * Cleans up the CodeMirror editor by converting back to textarea\n   */\n  destroy() {\n    if (this.cm) {\n      this.cm.toTextArea();\n    }\n  }\n}"],"names":["DEFAULT_TIMEOUT_MS","NETWORK_TIMEOUT_MS","TEMPLATE_LOAD_TIMEOUT_MS","MIN_LEFT_PANE_WIDTH","MIN_RIGHT_PANE_WIDTH","MIN_CONSOLE_HEIGHT","MIN_PREVIEW_HEIGHT","RESIZE_HANDLE_WIDTH","DEFAULT_STORAGE_KEY","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","TRACE","MOBILE_BREAKPOINT","DEFAULT_EXAMPLES_PATH","baseTag","document","querySelector","href","URL","pathname","window","location","includes","getBasePath","DEFAULT_TEMPLATE_PATH","EVENTS","INIT_START","INIT_COMPLETE","INIT_ERROR","CODE_CHANGE","CODE_LOAD","CODE_VALIDATE","CODE_EXECUTE_START","CODE_EXECUTE_COMPLETE","CODE_EXECUTE_TIMEOUT","CONSOLE_MESSAGE","CONSOLE_CLEAR","SANDBOX_RESET","STATUS_CHANGE","THEME_LOAD_START","THEME_LOAD_COMPLETE","THEME_CHANGE","THEME_READY","EDITOR_READY","EXAMPLE_LOAD","EXAMPLE_LOADED","EXAMPLE_ERROR","PANES_RESIZED","PANES_RESIZED_VERTICAL","DESTROY","STATUS_MESSAGES","executing","completed","timeout","reset","cleared","CRYPTO_ARRAY_SIZE","TEMPLATE_MARKERS","SECRET","USER_CODE","loggingManager","constructor","this","allowedComponents","Set","globalEnabled","allowAll","loadFromStorage","enable","components","forEach","add","comp","toLowerCase","saveToStorage","console","log","join","disable","delete","enableAll","disableAll","clear","status","Array","from","listComponents","registeredComponents","sort","enabled","isComponentEnabled","component","has","registerComponent","state","localStorage","setItem","JSON","stringify","e","parse","getItem","logFilter","list","Logger","options","level","prefix","redactSecrets","currentLevel","toUpperCase","shouldLog","componentAllowed","redactArgs","args","map","arg","replace","formatMessage","message","error","warn","info","debug","trace","wasRedacting","table","data","columns","group","label","groupCollapsed","groupEnd","time","timeEnd","setLevel","isEnabled","EditorAdapter","container","eventEmitter","changeHandlers","executeHandlers","logger","on","onThemeChange","theme","oldTheme","getValue","Error","setValue","code","onChange","callback","push","onExecute","focus","triggerChange","handler","triggerExecute","newTheme","destroy","CodeMirrorEditor","super","cm","currentTheme","init","CodeMirror","textarea","createElement","appendChild","fromTextArea","mode","lineNumbers","lineWrapping","indentUnit","tabSize","indentWithTabs","autofocus","extraKeys","applyGlassEffect","setOption","getOption","setTimeout","cmElement","backgroundColor","getComputedStyle","reducedOpacityColor","reduceColorOpacity","styleElement","getElementById","id","head","themeClass","textContent","color","opacity","rgbaMatch","match","r","g","b","rgbMatch","hexMatch","parseInt","getCurrentTheme","setTheme","toTextArea"],"mappings":"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"}