{"version":3,"file":"core-D9S956mc.js","sources":["../../src/core/constants.js","../../src/core/logger.js","../../src/core/utils.js","../../src/core/template.js","../../src/core/sandbox.js","../../src/core/console.js","../../src/core/events.js"],"sourcesContent":["/**\n * Application-wide constants\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\n\n// Execution timeouts\nexport const DEFAULT_TIMEOUT_MS = 4000;\nexport const NETWORK_TIMEOUT_MS = 5000;\nexport const TEMPLATE_LOAD_TIMEOUT_MS = 5000;\n\n// UI dimensions\nexport const MIN_LEFT_PANE_WIDTH = 320;\nexport const MIN_RIGHT_PANE_WIDTH = 420;\nexport const MIN_CONSOLE_HEIGHT = 100;\nexport const MIN_PREVIEW_HEIGHT = 100;\nexport const RESIZE_HANDLE_WIDTH = 5;\nexport const VERTICAL_RESIZE_HANDLE_HEIGHT = 8;\n\n// Storage keys\nexport const DEFAULT_STORAGE_KEY = 'js-sandbox-code';\n\n// Log levels\nexport const LOG_LEVELS = {\n  ERROR: 0,\n  WARN: 1,\n  INFO: 2,\n  DEBUG: 3,\n  TRACE: 4\n};\n\n// Default log level\nexport const DEFAULT_LOG_LEVEL = 'info';\n\n// Mobile breakpoint\nexport const MOBILE_BREAKPOINT = 768;\n\n/**\n * Gets the base path from the current document base or defaults to root\n * @returns {string} The base path (e.g., '/sandboxjs/' or '/')\n */\nfunction getBasePath() {\n  // Check if there's a base tag\n  const baseTag = document.querySelector('base');\n  if (baseTag && baseTag.href) {\n    const url = new URL(baseTag.href);\n    return url.pathname;\n  }\n  \n  // Fallback: detect from current path\n  const path = window.location.pathname;\n  // If path includes /sandboxjs/, use that as base\n  if (path.includes('/sandboxjs/')) {\n    return '/sandboxjs/';\n  }\n  \n  return '/';\n}\n\n// Examples path - dynamically determined based on base path\nexport const DEFAULT_EXAMPLES_PATH = getBasePath() + 'examples';\n\n// Template path - relative path works in both dev and production\nexport const DEFAULT_TEMPLATE_PATH = './src/core/sandbox-template.html';\n\n// Event names\nexport const EVENTS = {\n  // Initialization\n  INIT_START: 'init:start',\n  INIT_COMPLETE: 'init:complete',\n  INIT_ERROR: 'init:error',\n  \n  // Code events\n  CODE_CHANGE: 'code:change',\n  CODE_LOAD: 'code:load',\n  CODE_VALIDATE: 'code:validate',\n  CODE_EXECUTE_START: 'code:execute:start',\n  CODE_EXECUTE_COMPLETE: 'code:execute:complete',\n  CODE_EXECUTE_TIMEOUT: 'code:execute:timeout',\n  \n  // Console events\n  CONSOLE_MESSAGE: 'console:message',\n  CONSOLE_CLEAR: 'console:clear',\n  \n  // Sandbox events\n  SANDBOX_RESET: 'sandbox:reset',\n  \n  // Status events\n  STATUS_CHANGE: 'status:change',\n  \n  // Editor events\n  EDITOR_READY: 'editor:ready',\n  \n  // Example events\n  EXAMPLE_LOAD: 'example:load',\n  EXAMPLE_LOADED: 'example:loaded',\n  EXAMPLE_ERROR: 'example:error',\n  \n  // Pane events\n  PANES_RESIZED: 'panes:resized',\n  PANES_RESIZED_VERTICAL: 'panes:resized:vertical',\n  \n  // Destroy\n  DESTROY: 'destroy'\n};\n\n// Status messages\nexport const STATUS_MESSAGES = {\n  executing: 'Executing…',\n  completed: 'Completed',\n  timeout: 'Timeout exceeded',\n  reset: 'Sandbox reset',\n  cleared: 'Console cleared'\n};\n\n// Security\nexport const CRYPTO_ARRAY_SIZE = 2;\n\n// Template markers\nexport const TEMPLATE_MARKERS = {\n  SECRET: '{{SECRET}}',\n  USER_CODE: '{{USER_CODE}}'\n};\n","import { LOG_LEVELS, DEFAULT_LOG_LEVEL } from './constants.js';\n\n/**\n * Configurable logging interface with level-based filtering and prefixes\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance\n   * @param {Object} options - Logger configuration options\n   * @param {boolean} [options.enabled=true] - Whether logging is enabled\n   * @param {string} [options.level='info'] - Log level (error, warn, info, debug, trace)\n   * @param {string} [options.prefix=''] - Prefix to add to all log messages\n   * @param {boolean} [options.redactSecrets=false] - Whether to redact potential secrets\n   */\n  constructor(options = {}) {\n    this.enabled = options.enabled !== false;\n    this.level = options.level || DEFAULT_LOG_LEVEL;\n    this.prefix = options.prefix || '';\n    this.redactSecrets = options.redactSecrets || false;\n    this.currentLevel = LOG_LEVELS[this.level.toUpperCase()] ?? LOG_LEVELS.INFO;\n  }\n\n  /**\n   * Checks if a message should be logged based on current level and enabled state\n   * @param {string} level - The log level to check\n   * @returns {boolean} True if the message should be logged\n   */\n  shouldLog(level) {\n    return this.enabled && LOG_LEVELS[level.toUpperCase()] <= this.currentLevel;\n  }\n\n  /**\n   * Redacts potential secrets from arguments\n   * @param {Array} args - Arguments to redact\n   * @returns {Array} Redacted arguments\n   */\n  redactArgs(args) {\n    if (!this.redactSecrets) return args;\n    \n    return args.map(arg => {\n      if (typeof arg === 'string') {\n        // Redact anything that looks like a token/secret (alphanumeric strings > 20 chars)\n        return arg.replace(/\\b[a-zA-Z0-9]{20,}\\b/g, '[REDACTED]');\n      }\n      return arg;\n    });\n  }\n\n  /**\n   * Formats a message with prefix\n   * @param {string} message - The message to format\n   * @param {...any} args - Additional arguments\n   * @returns {Array} Formatted message array\n   */\n  formatMessage(message, ...args) {\n    const prefix = this.prefix ? `[${this.prefix}] ` : '';\n    const redactedArgs = this.redactArgs(args);\n    return [prefix + message, ...redactedArgs];\n  }\n\n  /**\n   * Logs an error message\n   * @param {string} message - The error message\n   * @param {...any} args - Additional arguments\n   */\n  error(message, ...args) {\n    if (this.shouldLog('error')) {\n      console.error(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a warning message\n   * @param {string} message - The warning message\n   * @param {...any} args - Additional arguments\n   */\n  warn(message, ...args) {\n    if (this.shouldLog('warn')) {\n      console.warn(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs an info message\n   * @param {string} message - The info message\n   * @param {...any} args - Additional arguments\n   */\n  info(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.info(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a general message\n   * @param {string} message - The message\n   * @param {...any} args - Additional arguments\n   */\n  log(message, ...args) {\n    if (this.shouldLog('info')) {\n      console.log(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a debug message\n   * @param {string} message - The debug message\n   * @param {...any} args - Additional arguments\n   */\n  debug(message, ...args) {\n    if (this.shouldLog('debug')) {\n      console.debug(...this.formatMessage(message, ...args));\n    }\n  }\n\n  /**\n   * Logs a trace message (with secret redaction by default)\n   * @param {string} message - The trace message\n   * @param {...any} args - Additional arguments\n   */\n  trace(message, ...args) {\n    if (this.shouldLog('trace')) {\n      // Always redact for trace logs to avoid leaking secrets\n      const wasRedacting = this.redactSecrets;\n      this.redactSecrets = true;\n      console.trace(...this.formatMessage(message, ...args));\n      this.redactSecrets = wasRedacting;\n    }\n  }\n\n  /**\n   * Logs a table of data\n   * @param {any} data - The data to display in table format\n   * @param {Array} [columns] - Optional column names\n   */\n  table(data, columns) {\n    if (this.shouldLog('info')) {\n      const prefix = this.prefix ? `[${this.prefix}]` : '';\n      if (prefix) console.log(prefix);\n      console.table(data, columns);\n    }\n  }\n\n  /**\n   * Creates a new group in the console\n   * @param {string} label - The group label\n   */\n  group(label) {\n    if (this.shouldLog('info')) {\n      console.group(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Creates a new collapsed group in the console\n   * @param {string} label - The group label\n   */\n  groupCollapsed(label) {\n    if (this.shouldLog('info')) {\n      console.groupCollapsed(...this.formatMessage(label));\n    }\n  }\n\n  /**\n   * Ends the current console group\n   */\n  groupEnd() {\n    if (this.shouldLog('info')) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Starts a timer with the given label\n   * @param {string} label - The timer label\n   */\n  time(label) {\n    if (this.shouldLog('debug')) {\n      console.time(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Ends a timer with the given label\n   * @param {string} label - The timer label\n   */\n  timeEnd(label) {\n    if (this.shouldLog('debug')) {\n      console.timeEnd(this.prefix ? `[${this.prefix}] ${label}` : label);\n    }\n  }\n\n  /**\n   * Sets the log level\n   * @param {string} level - The new log level\n   */\n  setLevel(level) {\n    this.level = level;\n    this.currentLevel = LOG_LEVELS[level.toUpperCase()] ?? LOG_LEVELS.INFO;\n  }\n\n  /**\n   * Enables logging\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * Disables logging\n   */\n  disable() {\n    this.enabled = false;\n  }\n\n  /**\n   * Checks if logging is enabled\n   * @returns {boolean} True if logging is enabled\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n}\n","/**\n * Utility functions for the sandbox application\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\n\nimport { NETWORK_TIMEOUT_MS } from './constants.js';\n\n/**\n * Creates a fetch request with timeout\n * @param {string} url - The URL to fetch\n * @param {Object} options - Fetch options\n * @param {number} timeout - Timeout in milliseconds\n * @returns {Promise<Response>} The fetch response\n */\nexport async function fetchWithTimeout(url, options = {}, timeout = NETWORK_TIMEOUT_MS) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new Error(`Request timeout after ${timeout}ms`);\n    }\n    throw error;\n  }\n}\n\n/**\n * Escapes HTML to prevent XSS\n * @param {string} text - Text to escape\n * @returns {string} Escaped text\n */\nexport function escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Debounces a function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Throttles a function\n * @param {Function} func - Function to throttle\n * @param {number} limit - Time limit in milliseconds\n * @returns {Function} Throttled function\n */\nexport function throttle(func, limit) {\n  let inThrottle;\n  return function executedFunction(...args) {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n/**\n * Creates a safe JSON stringify that handles circular references\n * @param {any} obj - Object to stringify\n * @param {number} space - Spacing for formatting\n * @returns {string} JSON string\n */\nexport function safeStringify(obj, space = 2) {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return '[Circular]';\n      }\n      seen.add(value);\n    }\n    if (typeof Node !== 'undefined' && value instanceof Node) {\n      return '<' + (value.nodeName || 'node').toLowerCase() + '>';\n    }\n    if (value instanceof Error) {\n      return value.stack || value.message || String(value);\n    }\n    return value;\n  }, space);\n}\n\n/**\n * Checks if device is mobile based on viewport width\n * @param {number} breakpoint - Mobile breakpoint in pixels\n * @returns {boolean} True if mobile\n */\nexport function isMobile(breakpoint = 768) {\n  return window.matchMedia(`(max-width: ${breakpoint}px)`).matches;\n}\n\n/**\n * Creates a promise that resolves after a delay\n * @param {number} ms - Delay in milliseconds\n * @returns {Promise<void>}\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Sanitizes code for safe template injection\n * @param {string} code - Code to sanitize\n * @returns {string} Sanitized code\n */\nexport function sanitizeCode(code) {\n  // Escape closing script tags to prevent breaking out of the script context\n  return code.replace(/<\\/(script)/gi, '<\\\\/$1');\n}\n","import { Logger } from './logger.js';\nimport { fetchWithTimeout, sanitizeCode } from './utils.js';\nimport { \n  TEMPLATE_LOAD_TIMEOUT_MS, \n  DEFAULT_TEMPLATE_PATH,\n  TEMPLATE_MARKERS \n} from './constants.js';\n\n/**\n * Template engine for building sandboxed HTML execution environments\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class TemplateEngine {\n  /**\n   * Creates a new TemplateEngine instance\n   * @param {string} [templatePath] - Path to the HTML template file\n   * @param {Object} [options={}] - Configuration options\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(templatePath = DEFAULT_TEMPLATE_PATH, options = {}) {\n    this.templatePath = templatePath;\n    this.template = null;\n    this.isLoaded = false;\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'TemplateEngine',\n      redactSecrets: true\n    });\n  }\n\n  /**\n   * Forces a reload of the template from disk\n   */\n  forceReload() {\n    this.logger.info('Force reloading template...');\n    this.template = null;\n    this.isLoaded = false;\n  }\n\n  /**\n   * Initializes the template engine by loading the HTML template\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Starting initialization...');\n    if (this.isLoaded) {\n      this.logger.debug('Already loaded, skipping');\n      return;\n    }\n\n    try {\n      this.logger.debug('Fetching template from:', this.templatePath);\n      // Add cache busting to force reload\n      const cacheBuster = '?t=' + Date.now();\n      const response = await fetchWithTimeout(\n        this.templatePath + cacheBuster,\n        {},\n        TEMPLATE_LOAD_TIMEOUT_MS\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load template: ${response.status}`);\n      }\n      \n      this.template = await response.text();\n      \n      // Validate template has required markers\n      this.validateTemplate();\n      \n      this.logger.info('Template loaded successfully, length:', this.template.length);\n      this.logger.debug('Template preview:', this.template.substring(0, 200) + '...');\n      this.isLoaded = true;\n    } catch (error) {\n      this.logger.error('Failed to load sandbox template:', error.message);\n      this.logger.warn('Using fallback template');\n      this.template = this.getFallbackTemplate();\n      this.isLoaded = true;\n    }\n  }\n\n  /**\n   * Validates that the template contains required markers\n   * @throws {Error} If template is missing required markers\n   */\n  validateTemplate() {\n    const requiredMarkers = [\n      TEMPLATE_MARKERS.SECRET,\n      TEMPLATE_MARKERS.USER_CODE\n    ];\n\n    const missingMarkers = requiredMarkers.filter(\n      marker => !this.template.includes(marker)\n    );\n\n    if (missingMarkers.length > 0) {\n      throw new Error(\n        `Template missing required markers: ${missingMarkers.join(', ')}`\n      );\n    }\n\n    this.logger.debug('Template validation passed');\n  }\n\n  /**\n   * Returns a fallback HTML template when the external template file fails to load\n   * @returns {string} The fallback HTML template\n   */\n  getFallbackTemplate() {\n    return `<!doctype html>\n<html><head><meta charset=\"utf-8\"><title>Sandbox</title>\n<style>html,body{margin:0;padding:12px;font:14px/1.4 -apple-system, system-ui, Segoe UI, Roboto} body{background:#fff;color:#111}</style>\n</head><body>\n<script>\n(function(){\n  var SECRET = \"${TEMPLATE_MARKERS.SECRET}\";\n  var send = function(type){\n    var args = Array.prototype.slice.call(arguments,1);\n    try { parent.postMessage({ __sandbox: true, secret: SECRET, type: type, args: args }, \"*\"); } catch(e) {}\n  };\n  [\"log\",\"info\",\"warn\",\"error\"].forEach ? [\"log\",\"info\",\"warn\",\"error\"].forEach(function(m){\n    var original = console[m].bind(console);\n    console[m] = function(){ send.apply(null, [m].concat([].slice.call(arguments))); try { original.apply(console, arguments); } catch(_) {} };\n  }) : null;\n  addEventListener(\"error\", function(e){\n    send(\"error\", (e.error && (e.error.stack || e.error.message)) || (e.message + \" @\" + e.filename + \":\" + e.lineno + \":\" + e.colno));\n  });\n  addEventListener(\"unhandledrejection\", function(e){\n    var r = e.reason; send(\"error\", \"Unhandled rejection: \" + (r && (r.stack || r.message) || String(r)));\n  });\n  try {\n${TEMPLATE_MARKERS.USER_CODE}\n  } catch (err) {\n    try { console.error(err); } catch(_) {}\n  } finally {\n    setTimeout(function(){ send(\"done\"); }, 0);\n  }\n})();\n</script>\n</body></html>`;\n  }\n\n  /**\n   * Builds an HTML document with user code and security token injected\n   * @param {string} userCode - The user's JavaScript code to execute\n   * @param {string} secret - Security token for sandboxed communication\n   * @returns {string} Complete HTML document ready for iframe execution\n   */\n  buildSrcDoc(userCode, secret) {\n    this.logger.debug('Building srcDoc...');\n    if (!this.isLoaded) {\n      throw new Error('TemplateEngine not initialized. Call initialize() first.');\n    }\n\n    // Sanitize user code\n    const sanitized = sanitizeCode(userCode);\n    const secretValue = String(secret);\n\n    // Add sourceURL to user code for better debugging\n    const userCodeWithSourceMap = `//# sourceURL=user-code.js\\n${sanitized}`;\n\n    this.logger.trace('Replacing template markers');\n\n    // Replace markers\n    const afterSecret = this.template.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.SECRET), 'g'),\n      secretValue\n    );\n    \n    const result = afterSecret.replace(\n      new RegExp(this.escapeRegExp(TEMPLATE_MARKERS.USER_CODE), 'g'),\n      userCodeWithSourceMap\n    );\n\n    this.logger.debug('Template replacement complete');\n    this.logger.trace('Result preview:', result.substring(0, 500) + '...');\n\n    return result;\n  }\n\n  /**\n   * Escapes special regex characters in a string\n   * @param {string} str - String to escape\n   * @returns {string} Escaped string\n   */\n  escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n","import { TemplateEngine } from './template.js';\nimport { Logger } from './logger.js';\nimport { DEFAULT_TIMEOUT_MS, CRYPTO_ARRAY_SIZE } from './constants.js';\n\n/**\n * Sandboxed JavaScript execution engine using iframe isolation\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class SandboxEngine {\n  /**\n   * Creates a new SandboxEngine instance\n   * @param {HTMLElement} container - DOM element to contain the sandbox iframe\n   * @param {Object} [options={}] - Configuration options\n   * @param {number} [options.timeLimit] - Execution timeout in milliseconds\n   * @param {Function} [options.onMessage] - Callback for sandbox messages\n   * @param {Function} [options.onStatusChange] - Callback for status updates\n   * @param {string} [options.templatePath] - Path to custom sandbox template\n   * @param {boolean} [options.debug=true] - Enable debug logging\n   * @param {string} [options.logLevel='info'] - Log level for debugging\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.timeLimit = options.timeLimit || DEFAULT_TIMEOUT_MS;\n    this.onMessage = options.onMessage || (() => {});\n    this.onStatusChange = options.onStatusChange || (() => {});\n\n    this.iframe = null;\n    this.killTimer = null;\n    this.currentSecret = this.generateSecret();\n    this.messageHandler = null;\n\n    this.logger = new Logger({\n      enabled: options.debug !== false,\n      level: options.logLevel || 'info',\n      prefix: 'SandboxEngine',\n      redactSecrets: true\n    });\n\n    this.templateEngine = new TemplateEngine(options.templatePath, {\n      debug: options.debug,\n      logLevel: options.logLevel\n    });\n\n    this.createIframe();\n    this.setupMessageListener();\n  }\n\n  /**\n   * Initializes the sandbox engine and template system\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    this.logger.info('Initializing...');\n    \n    try {\n      await this.templateEngine.initialize();\n      this.logger.info('Template engine initialized');\n    } catch (error) {\n      this.logger.error('Template initialization failed:', error);\n      throw new Error(`Sandbox initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generates a cryptographically secure random secret for sandbox communication\n   * @returns {string} Random secret token\n   */\n  generateSecret() {\n    try {\n      if (window.crypto && window.crypto.getRandomValues) {\n        const arr = new Uint32Array(CRYPTO_ARRAY_SIZE);\n        window.crypto.getRandomValues(arr);\n        return String(arr[0]) + String(arr[1]);\n      }\n    } catch (e) {\n      this.logger.warn('Crypto API unavailable, using fallback', e);\n    }\n    return String(Math.random()).slice(2) + Date.now();\n  }\n\n  /**\n   * Creates a new sandboxed iframe element\n   */\n  createIframe() {\n    // Clear the entire container to ensure no duplicates\n    this.container.innerHTML = '';\n\n    this.iframe = document.createElement('iframe');\n    this.iframe.className = 'sandbox-iframe';\n    this.iframe.setAttribute('sandbox', 'allow-scripts allow-modals');\n    this.iframe.title = 'Code Sandbox';\n    this.container.appendChild(this.iframe);\n  }\n\n  /**\n   * Resets the sandbox by creating a fresh iframe\n   */\n  reset() {\n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n      this.killTimer = null;\n    }\n    this.createIframe();\n    this.onStatusChange('reset');\n  }\n\n  /**\n   * Validates JavaScript syntax without executing it\n   * @param {string} code - The JavaScript code to validate\n   * @returns {Object} Validation result with {valid: boolean, error?: string}\n   */\n  validateSyntax(code) {\n    try {\n      // Use Function constructor to check syntax without executing\n      new Function(code);\n      return { valid: true };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message,\n        name: error.name,\n        toString: () => `${error.name}: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Executes JavaScript code in the sandboxed iframe\n   * @param {string} code - The JavaScript code to execute\n   * @returns {Promise<void>}\n   */\n  async execute(code) {\n    this.logger.debug('Executing code...');\n\n    // Ensure template is loaded before execution\n    if (!this.templateEngine.isLoaded) {\n      this.logger.debug('Template not loaded, initializing...');\n      await this.templateEngine.initialize();\n    }\n\n    // First, validate syntax\n    const validation = this.validateSyntax(code);\n    if (!validation.valid) {\n      this.logger.debug('Syntax error detected:', validation.error);\n      this.onMessage('error', [validation.toString()]);\n      this.onStatusChange('completed');\n      return;\n    }\n\n    this.currentSecret = this.generateSecret();\n    this.logger.trace('Generated secret for execution');\n\n    const srcdoc = this.templateEngine.buildSrcDoc(code, this.currentSecret);\n    this.logger.debug('Setting iframe srcdoc...');\n\n    this.iframe.srcdoc = srcdoc;\n    this.onStatusChange('executing');\n\n    if (this.killTimer) clearTimeout(this.killTimer);\n    this.killTimer = setTimeout(() => {\n      this.onMessage('error', [`⏱️ Execution timeout (${this.timeLimit}ms). Sandbox reset.`]);\n      this.reset();\n      this.onStatusChange('timeout');\n    }, this.timeLimit);\n  }\n\n  /**\n   * Sets up the postMessage listener for communication with the sandboxed iframe\n   */\n  setupMessageListener() {\n    // Remove existing listener if any\n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n    }\n\n    // Create bound handler for proper removal later\n    this.messageHandler = (ev) => {\n      if (ev.source !== this.iframe?.contentWindow) return;\n      const data = ev.data || {};\n      if (!data.__sandbox || data.secret !== this.currentSecret) return;\n\n      const type = data.type || 'log';\n      const args = Array.isArray(data.args) ? data.args : [data.args];\n\n      if (type === 'done') {\n        if (this.killTimer) {\n          clearTimeout(this.killTimer);\n          this.killTimer = null;\n        }\n        this.onStatusChange('completed');\n        return;\n      }\n\n      this.onMessage(type, args);\n    };\n\n    window.addEventListener('message', this.messageHandler);\n  }\n\n  /**\n   * Cleans up the sandbox engine by removing timers and DOM elements\n   */\n  destroy() {\n    this.logger.info('Destroying sandbox engine...');\n    \n    if (this.killTimer) {\n      clearTimeout(this.killTimer);\n      this.killTimer = null;\n    }\n    \n    if (this.messageHandler) {\n      window.removeEventListener('message', this.messageHandler);\n      this.messageHandler = null;\n    }\n    \n    if (this.iframe) {\n      this.iframe.remove();\n      this.iframe = null;\n    }\n    \n    this.logger.info('Sandbox engine destroyed');\n  }\n}\n","import { safeStringify } from './utils.js';\nimport { Logger } from './logger.js';\n\n/**\n * Console output renderer for displaying sandboxed code execution results\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class ConsoleOutput {\n  /**\n   * Creates a new ConsoleOutput instance\n   * @param {HTMLElement} container - The DOM element to render console output in\n   * @param {Object} [options={}] - Configuration options\n   * @param {boolean} [options.debug=false] - Enable debug logging\n   */\n  constructor(container, options = {}) {\n    this.container = container;\n    this.logger = new Logger({\n      enabled: options.debug || false,\n      level: 'warn',\n      prefix: 'ConsoleOutput'\n    });\n  }\n\n  /**\n   * Clears all console output\n   */\n  clear() {\n    this.container.innerHTML = '';\n  }\n\n  /**\n   * Adds a new line to the console output\n   * @param {string} type - The log type (log, info, warn, error)\n   * @param {Array} args - The arguments to display\n   */\n  addLine(type, args) {\n    try {\n      const div = document.createElement('div');\n      div.className = `console-line console-${type}`;\n      div.textContent = args.map(arg => this.formatArg(arg)).join(' ');\n      this.container.appendChild(div);\n      this.container.scrollTop = this.container.scrollHeight;\n    } catch (error) {\n      this.logger.error('Failed to add console line:', error);\n    }\n  }\n\n  /**\n   * Formats a value for display in the console\n   * @param {any} value - The value to format\n   * @returns {string} The formatted string representation\n   */\n  formatArg(value) {\n    try {\n      // Handle Error objects\n      if (value instanceof Error) {\n        return value.stack || value.message || String(value);\n      }\n    } catch (e) {\n      this.logger.warn('Error checking instanceof Error:', e);\n    }\n\n    const type = typeof value;\n    \n    // Handle primitive types\n    if (type === 'string') return value;\n    if (type === 'number' || type === 'boolean' || value === null) {\n      return String(value);\n    }\n    if (type === 'undefined') return 'undefined';\n\n    // Handle DOM nodes\n    try {\n      if (typeof Node !== 'undefined' && value instanceof Node) {\n        return '<' + (value.nodeName || 'node').toLowerCase() + '>';\n      }\n    } catch (e) {\n      this.logger.warn('Error checking instanceof Node:', e);\n    }\n\n    // Handle objects and arrays\n    try {\n      return safeStringify(value);\n    } catch (e) {\n      this.logger.warn('Failed to stringify value:', e);\n      return String(value);\n    }\n  }\n}\n","/**\n * Event system for external communication with the sandbox\n * @author Joao Guilherme (Guinetik) <guinetik@gmail.com>\n */\nexport class EventEmitter {\n  /**\n   * Creates a new EventEmitter instance\n   */\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * Registers an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @param {Object} [options={}] - Options for the listener\n   * @param {boolean} [options.once=false] - Whether to remove after first call\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, callback, options = {}) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n\n    const listener = {\n      callback,\n      once: options.once || false\n    };\n\n    this.events.get(event).push(listener);\n\n    // Return unsubscribe function\n    return () => this.off(event, callback);\n  }\n\n  /**\n   * Registers a one-time event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, callback) {\n    return this.on(event, callback, { once: true });\n  }\n\n  /**\n   * Removes an event listener\n   * @param {string} event - The event name\n   * @param {Function} callback - The callback function to remove\n   */\n  off(event, callback) {\n    if (!this.events.has(event)) return;\n\n    const listeners = this.events.get(event);\n    const index = listeners.findIndex(listener => listener.callback === callback);\n\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n  }\n\n  /**\n   * Emits an event to all registered listeners\n   * @param {string} event - The event name\n   * @param {...any} args - Arguments to pass to listeners\n   * @returns {boolean} True if any listeners were called\n   */\n  emit(event, ...args) {\n    if (!this.events.has(event)) return false;\n\n    const listeners = this.events.get(event);\n    const listenersToRemove = [];\n\n    listeners.forEach((listener, index) => {\n      try {\n        listener.callback(...args);\n        if (listener.once) {\n          listenersToRemove.push(index);\n        }\n      } catch (error) {\n        console.error(`Error in event listener for '${event}':`, error);\n      }\n    });\n\n    // Remove one-time listeners (in reverse order to maintain indices)\n    listenersToRemove.reverse().forEach(index => {\n      listeners.splice(index, 1);\n    });\n\n    // Clean up empty event arrays\n    if (listeners.length === 0) {\n      this.events.delete(event);\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes all listeners for an event, or all listeners if no event specified\n   * @param {string} [event] - The event name, or undefined to clear all\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n\n  /**\n   * Returns an array of event names that have listeners\n   * @returns {Array<string>} Array of event names\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n\n  /**\n   * Returns the number of listeners for an event\n   * @param {string} event - The event name\n   * @returns {number} Number of listeners\n   */\n  listenerCount(event) {\n    return this.events.has(event) ? this.events.get(event).length : 0;\n  }\n}"],"names":["DEFAULT_TIMEOUT_MS","NETWORK_TIMEOUT_MS","MIN_LEFT_PANE_WIDTH","MIN_RIGHT_PANE_WIDTH","MIN_CONSOLE_HEIGHT","MIN_PREVIEW_HEIGHT","RESIZE_HANDLE_WIDTH","DEFAULT_STORAGE_KEY","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","TRACE","MOBILE_BREAKPOINT","DEFAULT_EXAMPLES_PATH","baseTag","document","querySelector","href","URL","pathname","window","location","includes","getBasePath","EVENTS","INIT_START","INIT_COMPLETE","INIT_ERROR","CODE_CHANGE","CODE_LOAD","CODE_VALIDATE","CODE_EXECUTE_START","CODE_EXECUTE_COMPLETE","CODE_EXECUTE_TIMEOUT","CONSOLE_MESSAGE","CONSOLE_CLEAR","SANDBOX_RESET","STATUS_CHANGE","EDITOR_READY","EXAMPLE_LOAD","EXAMPLE_LOADED","EXAMPLE_ERROR","PANES_RESIZED","PANES_RESIZED_VERTICAL","DESTROY","STATUS_MESSAGES","executing","completed","timeout","reset","cleared","TEMPLATE_MARKERS","Logger","constructor","options","this","enabled","level","prefix","redactSecrets","currentLevel","toUpperCase","shouldLog","redactArgs","args","map","arg","replace","formatMessage","message","error","console","warn","info","log","debug","trace","wasRedacting","table","data","columns","group","label","groupCollapsed","groupEnd","time","timeEnd","setLevel","enable","disable","isEnabled","async","fetchWithTimeout","url","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","name","Error","isMobile","breakpoint","matchMedia","matches","TemplateEngine","templatePath","template","isLoaded","logger","logLevel","forceReload","initialize","cacheBuster","Date","now","ok","status","text","validateTemplate","length","substring","getFallbackTemplate","missingMarkers","filter","marker","join","buildSrcDoc","userCode","secret","sanitized","secretValue","String","userCodeWithSourceMap","result","RegExp","escapeRegExp","str","SandboxEngine","container","timeLimit","onMessage","onStatusChange","iframe","killTimer","currentSecret","generateSecret","messageHandler","templateEngine","createIframe","setupMessageListener","crypto","getRandomValues","arr","Uint32Array","e","Math","random","slice","innerHTML","createElement","className","setAttribute","title","appendChild","validateSyntax","code","Function","valid","toString","execute","validation","srcdoc","removeEventListener","ev","source","contentWindow","__sandbox","type","Array","isArray","addEventListener","destroy","remove","ConsoleOutput","clear","addLine","div","textContent","formatArg","scrollTop","scrollHeight","value","stack","Node","nodeName","toLowerCase","obj","space","seen","WeakSet","JSON","stringify","key","has","add","safeStringify","EventEmitter","events","Map","on","event","callback","set","listener","once","get","push","off","listeners","index","findIndex","splice","delete","emit","listenersToRemove","forEach","reverse","removeAllListeners","eventNames","from","keys","listenerCount"],"mappings":"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"}